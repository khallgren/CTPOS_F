'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.1433
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.1433.
'
Namespace CashLinq
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="SmartPaymentsSoap", [Namespace]:="http://TPISoft.com/SmartPayments/")>  _
    Partial Public Class SmartPayments
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private ProcessCreditCardOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ProcessDebitCardOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ProcessEBTCardOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ProcessGiftCardOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ProcessCheckOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ProcessSignatureOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.CTPOS_F.My.MySettings.Default.CampTrakStore_net_donatelinq_SmartPayments
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event ProcessCreditCardCompleted As ProcessCreditCardCompletedEventHandler
        
        '''<remarks/>
        Public Event ProcessDebitCardCompleted As ProcessDebitCardCompletedEventHandler
        
        '''<remarks/>
        Public Event ProcessEBTCardCompleted As ProcessEBTCardCompletedEventHandler
        
        '''<remarks/>
        Public Event ProcessGiftCardCompleted As ProcessGiftCardCompletedEventHandler
        
        '''<remarks/>
        Public Event ProcessCheckCompleted As ProcessCheckCompletedEventHandler
        
        '''<remarks/>
        Public Event GetInfoCompleted As GetInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event ProcessSignatureCompleted As ProcessSignatureCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://TPISoft.com/SmartPayments/ProcessCreditCard", RequestNamespace:="http://TPISoft.com/SmartPayments/", ResponseNamespace:="http://TPISoft.com/SmartPayments/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ProcessCreditCard(ByVal UserName As String, ByVal Password As String, ByVal TransType As String, ByVal CardNum As String, ByVal ExpDate As String, ByVal MagData As String, ByVal NameOnCard As String, ByVal Amount As String, ByVal InvNum As String, ByVal PNRef As String, ByVal Zip As String, ByVal Street As String, ByVal CVNum As String, ByVal ExtData As String) As Response
            Dim results() As Object = Me.Invoke("ProcessCreditCard", New Object() {UserName, Password, TransType, CardNum, ExpDate, MagData, NameOnCard, Amount, InvNum, PNRef, Zip, Street, CVNum, ExtData})
            Return CType(results(0),Response)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ProcessCreditCardAsync(ByVal UserName As String, ByVal Password As String, ByVal TransType As String, ByVal CardNum As String, ByVal ExpDate As String, ByVal MagData As String, ByVal NameOnCard As String, ByVal Amount As String, ByVal InvNum As String, ByVal PNRef As String, ByVal Zip As String, ByVal Street As String, ByVal CVNum As String, ByVal ExtData As String)
            Me.ProcessCreditCardAsync(UserName, Password, TransType, CardNum, ExpDate, MagData, NameOnCard, Amount, InvNum, PNRef, Zip, Street, CVNum, ExtData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ProcessCreditCardAsync(ByVal UserName As String, ByVal Password As String, ByVal TransType As String, ByVal CardNum As String, ByVal ExpDate As String, ByVal MagData As String, ByVal NameOnCard As String, ByVal Amount As String, ByVal InvNum As String, ByVal PNRef As String, ByVal Zip As String, ByVal Street As String, ByVal CVNum As String, ByVal ExtData As String, ByVal userState As Object)
            If (Me.ProcessCreditCardOperationCompleted Is Nothing) Then
                Me.ProcessCreditCardOperationCompleted = AddressOf Me.OnProcessCreditCardOperationCompleted
            End If
            Me.InvokeAsync("ProcessCreditCard", New Object() {UserName, Password, TransType, CardNum, ExpDate, MagData, NameOnCard, Amount, InvNum, PNRef, Zip, Street, CVNum, ExtData}, Me.ProcessCreditCardOperationCompleted, userState)
        End Sub
        
        Private Sub OnProcessCreditCardOperationCompleted(ByVal arg As Object)
            If (Not (Me.ProcessCreditCardCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ProcessCreditCardCompleted(Me, New ProcessCreditCardCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://TPISoft.com/SmartPayments/ProcessDebitCard", RequestNamespace:="http://TPISoft.com/SmartPayments/", ResponseNamespace:="http://TPISoft.com/SmartPayments/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ProcessDebitCard(ByVal UserName As String, ByVal Password As String, ByVal TransType As String, ByVal CardNum As String, ByVal ExpDate As String, ByVal MagData As String, ByVal NameOnCard As String, ByVal Amount As String, ByVal InvNum As String, ByVal PNRef As String, ByVal Pin As String, ByVal RegisterNum As String, ByVal SureChargeAmt As String, ByVal CashBackAmt As String, ByVal ExtData As String) As Response
            Dim results() As Object = Me.Invoke("ProcessDebitCard", New Object() {UserName, Password, TransType, CardNum, ExpDate, MagData, NameOnCard, Amount, InvNum, PNRef, Pin, RegisterNum, SureChargeAmt, CashBackAmt, ExtData})
            Return CType(results(0),Response)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ProcessDebitCardAsync(ByVal UserName As String, ByVal Password As String, ByVal TransType As String, ByVal CardNum As String, ByVal ExpDate As String, ByVal MagData As String, ByVal NameOnCard As String, ByVal Amount As String, ByVal InvNum As String, ByVal PNRef As String, ByVal Pin As String, ByVal RegisterNum As String, ByVal SureChargeAmt As String, ByVal CashBackAmt As String, ByVal ExtData As String)
            Me.ProcessDebitCardAsync(UserName, Password, TransType, CardNum, ExpDate, MagData, NameOnCard, Amount, InvNum, PNRef, Pin, RegisterNum, SureChargeAmt, CashBackAmt, ExtData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ProcessDebitCardAsync( _
                    ByVal UserName As String,  _
                    ByVal Password As String,  _
                    ByVal TransType As String,  _
                    ByVal CardNum As String,  _
                    ByVal ExpDate As String,  _
                    ByVal MagData As String,  _
                    ByVal NameOnCard As String,  _
                    ByVal Amount As String,  _
                    ByVal InvNum As String,  _
                    ByVal PNRef As String,  _
                    ByVal Pin As String,  _
                    ByVal RegisterNum As String,  _
                    ByVal SureChargeAmt As String,  _
                    ByVal CashBackAmt As String,  _
                    ByVal ExtData As String,  _
                    ByVal userState As Object)
            If (Me.ProcessDebitCardOperationCompleted Is Nothing) Then
                Me.ProcessDebitCardOperationCompleted = AddressOf Me.OnProcessDebitCardOperationCompleted
            End If
            Me.InvokeAsync("ProcessDebitCard", New Object() {UserName, Password, TransType, CardNum, ExpDate, MagData, NameOnCard, Amount, InvNum, PNRef, Pin, RegisterNum, SureChargeAmt, CashBackAmt, ExtData}, Me.ProcessDebitCardOperationCompleted, userState)
        End Sub
        
        Private Sub OnProcessDebitCardOperationCompleted(ByVal arg As Object)
            If (Not (Me.ProcessDebitCardCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ProcessDebitCardCompleted(Me, New ProcessDebitCardCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://TPISoft.com/SmartPayments/ProcessEBTCard", RequestNamespace:="http://TPISoft.com/SmartPayments/", ResponseNamespace:="http://TPISoft.com/SmartPayments/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ProcessEBTCard(ByVal UserName As String, ByVal Password As String, ByVal TransType As String, ByVal CardNum As String, ByVal ExpDate As String, ByVal MagData As String, ByVal NameOnCard As String, ByVal Amount As String, ByVal InvNum As String, ByVal PNRef As String, ByVal Pin As String, ByVal RegisterNum As String, ByVal SureChargeAmt As String, ByVal CashBackAmt As String, ByVal ExtData As String) As Response
            Dim results() As Object = Me.Invoke("ProcessEBTCard", New Object() {UserName, Password, TransType, CardNum, ExpDate, MagData, NameOnCard, Amount, InvNum, PNRef, Pin, RegisterNum, SureChargeAmt, CashBackAmt, ExtData})
            Return CType(results(0),Response)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ProcessEBTCardAsync(ByVal UserName As String, ByVal Password As String, ByVal TransType As String, ByVal CardNum As String, ByVal ExpDate As String, ByVal MagData As String, ByVal NameOnCard As String, ByVal Amount As String, ByVal InvNum As String, ByVal PNRef As String, ByVal Pin As String, ByVal RegisterNum As String, ByVal SureChargeAmt As String, ByVal CashBackAmt As String, ByVal ExtData As String)
            Me.ProcessEBTCardAsync(UserName, Password, TransType, CardNum, ExpDate, MagData, NameOnCard, Amount, InvNum, PNRef, Pin, RegisterNum, SureChargeAmt, CashBackAmt, ExtData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ProcessEBTCardAsync( _
                    ByVal UserName As String,  _
                    ByVal Password As String,  _
                    ByVal TransType As String,  _
                    ByVal CardNum As String,  _
                    ByVal ExpDate As String,  _
                    ByVal MagData As String,  _
                    ByVal NameOnCard As String,  _
                    ByVal Amount As String,  _
                    ByVal InvNum As String,  _
                    ByVal PNRef As String,  _
                    ByVal Pin As String,  _
                    ByVal RegisterNum As String,  _
                    ByVal SureChargeAmt As String,  _
                    ByVal CashBackAmt As String,  _
                    ByVal ExtData As String,  _
                    ByVal userState As Object)
            If (Me.ProcessEBTCardOperationCompleted Is Nothing) Then
                Me.ProcessEBTCardOperationCompleted = AddressOf Me.OnProcessEBTCardOperationCompleted
            End If
            Me.InvokeAsync("ProcessEBTCard", New Object() {UserName, Password, TransType, CardNum, ExpDate, MagData, NameOnCard, Amount, InvNum, PNRef, Pin, RegisterNum, SureChargeAmt, CashBackAmt, ExtData}, Me.ProcessEBTCardOperationCompleted, userState)
        End Sub
        
        Private Sub OnProcessEBTCardOperationCompleted(ByVal arg As Object)
            If (Not (Me.ProcessEBTCardCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ProcessEBTCardCompleted(Me, New ProcessEBTCardCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://TPISoft.com/SmartPayments/ProcessGiftCard", RequestNamespace:="http://TPISoft.com/SmartPayments/", ResponseNamespace:="http://TPISoft.com/SmartPayments/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ProcessGiftCard(ByVal UserName As String, ByVal Password As String, ByVal TransType As String, ByVal CardNum As String, ByVal ExpDate As String, ByVal MagData As String, ByVal Amount As String, ByVal InvNum As String, ByVal PNRef As String, ByVal ExtData As String) As Response
            Dim results() As Object = Me.Invoke("ProcessGiftCard", New Object() {UserName, Password, TransType, CardNum, ExpDate, MagData, Amount, InvNum, PNRef, ExtData})
            Return CType(results(0),Response)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ProcessGiftCardAsync(ByVal UserName As String, ByVal Password As String, ByVal TransType As String, ByVal CardNum As String, ByVal ExpDate As String, ByVal MagData As String, ByVal Amount As String, ByVal InvNum As String, ByVal PNRef As String, ByVal ExtData As String)
            Me.ProcessGiftCardAsync(UserName, Password, TransType, CardNum, ExpDate, MagData, Amount, InvNum, PNRef, ExtData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ProcessGiftCardAsync(ByVal UserName As String, ByVal Password As String, ByVal TransType As String, ByVal CardNum As String, ByVal ExpDate As String, ByVal MagData As String, ByVal Amount As String, ByVal InvNum As String, ByVal PNRef As String, ByVal ExtData As String, ByVal userState As Object)
            If (Me.ProcessGiftCardOperationCompleted Is Nothing) Then
                Me.ProcessGiftCardOperationCompleted = AddressOf Me.OnProcessGiftCardOperationCompleted
            End If
            Me.InvokeAsync("ProcessGiftCard", New Object() {UserName, Password, TransType, CardNum, ExpDate, MagData, Amount, InvNum, PNRef, ExtData}, Me.ProcessGiftCardOperationCompleted, userState)
        End Sub
        
        Private Sub OnProcessGiftCardOperationCompleted(ByVal arg As Object)
            If (Not (Me.ProcessGiftCardCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ProcessGiftCardCompleted(Me, New ProcessGiftCardCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://TPISoft.com/SmartPayments/ProcessCheck", RequestNamespace:="http://TPISoft.com/SmartPayments/", ResponseNamespace:="http://TPISoft.com/SmartPayments/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ProcessCheck(ByVal UserName As String, ByVal Password As String, ByVal TransType As String, ByVal CheckNum As String, ByVal TransitNum As String, ByVal AccountNum As String, ByVal Amount As String, ByVal MICR As String, ByVal NameOnCheck As String, ByVal DL As String, ByVal SS As String, ByVal DOB As String, ByVal StateCode As String, ByVal CheckType As String, ByVal ExtData As String) As Response
            Dim results() As Object = Me.Invoke("ProcessCheck", New Object() {UserName, Password, TransType, CheckNum, TransitNum, AccountNum, Amount, MICR, NameOnCheck, DL, SS, DOB, StateCode, CheckType, ExtData})
            Return CType(results(0),Response)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ProcessCheckAsync(ByVal UserName As String, ByVal Password As String, ByVal TransType As String, ByVal CheckNum As String, ByVal TransitNum As String, ByVal AccountNum As String, ByVal Amount As String, ByVal MICR As String, ByVal NameOnCheck As String, ByVal DL As String, ByVal SS As String, ByVal DOB As String, ByVal StateCode As String, ByVal CheckType As String, ByVal ExtData As String)
            Me.ProcessCheckAsync(UserName, Password, TransType, CheckNum, TransitNum, AccountNum, Amount, MICR, NameOnCheck, DL, SS, DOB, StateCode, CheckType, ExtData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ProcessCheckAsync( _
                    ByVal UserName As String,  _
                    ByVal Password As String,  _
                    ByVal TransType As String,  _
                    ByVal CheckNum As String,  _
                    ByVal TransitNum As String,  _
                    ByVal AccountNum As String,  _
                    ByVal Amount As String,  _
                    ByVal MICR As String,  _
                    ByVal NameOnCheck As String,  _
                    ByVal DL As String,  _
                    ByVal SS As String,  _
                    ByVal DOB As String,  _
                    ByVal StateCode As String,  _
                    ByVal CheckType As String,  _
                    ByVal ExtData As String,  _
                    ByVal userState As Object)
            If (Me.ProcessCheckOperationCompleted Is Nothing) Then
                Me.ProcessCheckOperationCompleted = AddressOf Me.OnProcessCheckOperationCompleted
            End If
            Me.InvokeAsync("ProcessCheck", New Object() {UserName, Password, TransType, CheckNum, TransitNum, AccountNum, Amount, MICR, NameOnCheck, DL, SS, DOB, StateCode, CheckType, ExtData}, Me.ProcessCheckOperationCompleted, userState)
        End Sub
        
        Private Sub OnProcessCheckOperationCompleted(ByVal arg As Object)
            If (Not (Me.ProcessCheckCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ProcessCheckCompleted(Me, New ProcessCheckCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://TPISoft.com/SmartPayments/GetInfo", RequestNamespace:="http://TPISoft.com/SmartPayments/", ResponseNamespace:="http://TPISoft.com/SmartPayments/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetInfo(ByVal UserName As String, ByVal Password As String, ByVal TransType As String, ByVal ExtData As String) As Response
            Dim results() As Object = Me.Invoke("GetInfo", New Object() {UserName, Password, TransType, ExtData})
            Return CType(results(0),Response)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetInfoAsync(ByVal UserName As String, ByVal Password As String, ByVal TransType As String, ByVal ExtData As String)
            Me.GetInfoAsync(UserName, Password, TransType, ExtData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetInfoAsync(ByVal UserName As String, ByVal Password As String, ByVal TransType As String, ByVal ExtData As String, ByVal userState As Object)
            If (Me.GetInfoOperationCompleted Is Nothing) Then
                Me.GetInfoOperationCompleted = AddressOf Me.OnGetInfoOperationCompleted
            End If
            Me.InvokeAsync("GetInfo", New Object() {UserName, Password, TransType, ExtData}, Me.GetInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetInfoCompleted(Me, New GetInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://TPISoft.com/SmartPayments/ProcessSignature", RequestNamespace:="http://TPISoft.com/SmartPayments/", ResponseNamespace:="http://TPISoft.com/SmartPayments/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ProcessSignature(ByVal UserName As String, ByVal Password As String, ByVal SignatureType As String, ByVal SignatureData As String, ByVal PNRef As String, ByVal Result As String, ByVal AuthCode As String, ByVal ExtData As String) As Response
            Dim results() As Object = Me.Invoke("ProcessSignature", New Object() {UserName, Password, SignatureType, SignatureData, PNRef, Result, AuthCode, ExtData})
            Return CType(results(0),Response)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ProcessSignatureAsync(ByVal UserName As String, ByVal Password As String, ByVal SignatureType As String, ByVal SignatureData As String, ByVal PNRef As String, ByVal Result As String, ByVal AuthCode As String, ByVal ExtData As String)
            Me.ProcessSignatureAsync(UserName, Password, SignatureType, SignatureData, PNRef, Result, AuthCode, ExtData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ProcessSignatureAsync(ByVal UserName As String, ByVal Password As String, ByVal SignatureType As String, ByVal SignatureData As String, ByVal PNRef As String, ByVal Result As String, ByVal AuthCode As String, ByVal ExtData As String, ByVal userState As Object)
            If (Me.ProcessSignatureOperationCompleted Is Nothing) Then
                Me.ProcessSignatureOperationCompleted = AddressOf Me.OnProcessSignatureOperationCompleted
            End If
            Me.InvokeAsync("ProcessSignature", New Object() {UserName, Password, SignatureType, SignatureData, PNRef, Result, AuthCode, ExtData}, Me.ProcessSignatureOperationCompleted, userState)
        End Sub
        
        Private Sub OnProcessSignatureOperationCompleted(ByVal arg As Object)
            If (Not (Me.ProcessSignatureCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ProcessSignatureCompleted(Me, New ProcessSignatureCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://TPISoft.com/SmartPayments/")>  _
    Partial Public Class Response
        
        Private resultField As Integer
        
        Private respMSGField As String
        
        Private messageField As String
        
        Private message1Field As String
        
        Private message2Field As String
        
        Private authCodeField As String
        
        Private pNRefField As String
        
        Private hostCodeField As String
        
        Private hostURLField As String
        
        Private receiptURLField As String
        
        Private getAVSResultField As String
        
        Private getAVSResultTXTField As String
        
        Private getStreetMatchTXTField As String
        
        Private getZipMatchTXTField As String
        
        Private getCVResultField As String
        
        Private getCVResultTXTField As String
        
        Private getGetOrigResultField As String
        
        Private getCommercialCardField As String
        
        Private workingKeyField As String
        
        Private keyPointerField As String
        
        Private extDataField As String
        
        '''<remarks/>
        Public Property Result() As Integer
            Get
                Return Me.resultField
            End Get
            Set
                Me.resultField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property RespMSG() As String
            Get
                Return Me.respMSGField
            End Get
            Set
                Me.respMSGField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Message() As String
            Get
                Return Me.messageField
            End Get
            Set
                Me.messageField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Message1() As String
            Get
                Return Me.message1Field
            End Get
            Set
                Me.message1Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Message2() As String
            Get
                Return Me.message2Field
            End Get
            Set
                Me.message2Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AuthCode() As String
            Get
                Return Me.authCodeField
            End Get
            Set
                Me.authCodeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property PNRef() As String
            Get
                Return Me.pNRefField
            End Get
            Set
                Me.pNRefField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property HostCode() As String
            Get
                Return Me.hostCodeField
            End Get
            Set
                Me.hostCodeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property HostURL() As String
            Get
                Return Me.hostURLField
            End Get
            Set
                Me.hostURLField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ReceiptURL() As String
            Get
                Return Me.receiptURLField
            End Get
            Set
                Me.receiptURLField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property GetAVSResult() As String
            Get
                Return Me.getAVSResultField
            End Get
            Set
                Me.getAVSResultField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property GetAVSResultTXT() As String
            Get
                Return Me.getAVSResultTXTField
            End Get
            Set
                Me.getAVSResultTXTField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property GetStreetMatchTXT() As String
            Get
                Return Me.getStreetMatchTXTField
            End Get
            Set
                Me.getStreetMatchTXTField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property GetZipMatchTXT() As String
            Get
                Return Me.getZipMatchTXTField
            End Get
            Set
                Me.getZipMatchTXTField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property GetCVResult() As String
            Get
                Return Me.getCVResultField
            End Get
            Set
                Me.getCVResultField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property GetCVResultTXT() As String
            Get
                Return Me.getCVResultTXTField
            End Get
            Set
                Me.getCVResultTXTField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property GetGetOrigResult() As String
            Get
                Return Me.getGetOrigResultField
            End Get
            Set
                Me.getGetOrigResultField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property GetCommercialCard() As String
            Get
                Return Me.getCommercialCardField
            End Get
            Set
                Me.getCommercialCardField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property WorkingKey() As String
            Get
                Return Me.workingKeyField
            End Get
            Set
                Me.workingKeyField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property KeyPointer() As String
            Get
                Return Me.keyPointerField
            End Get
            Set
                Me.keyPointerField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ExtData() As String
            Get
                Return Me.extDataField
            End Get
            Set
                Me.extDataField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")>  _
    Public Delegate Sub ProcessCreditCardCompletedEventHandler(ByVal sender As Object, ByVal e As ProcessCreditCardCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ProcessCreditCardCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Response
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Response)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")>  _
    Public Delegate Sub ProcessDebitCardCompletedEventHandler(ByVal sender As Object, ByVal e As ProcessDebitCardCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ProcessDebitCardCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Response
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Response)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")>  _
    Public Delegate Sub ProcessEBTCardCompletedEventHandler(ByVal sender As Object, ByVal e As ProcessEBTCardCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ProcessEBTCardCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Response
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Response)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")>  _
    Public Delegate Sub ProcessGiftCardCompletedEventHandler(ByVal sender As Object, ByVal e As ProcessGiftCardCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ProcessGiftCardCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Response
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Response)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")>  _
    Public Delegate Sub ProcessCheckCompletedEventHandler(ByVal sender As Object, ByVal e As ProcessCheckCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ProcessCheckCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Response
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Response)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")>  _
    Public Delegate Sub GetInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Response
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Response)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")>  _
    Public Delegate Sub ProcessSignatureCompletedEventHandler(ByVal sender As Object, ByVal e As ProcessSignatureCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ProcessSignatureCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Response
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Response)
            End Get
        End Property
    End Class
End Namespace
