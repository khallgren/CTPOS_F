'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.42
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System


<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.ComponentModel.ToolboxItem(true),  _
 System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 System.Xml.Serialization.XmlRootAttribute("dsZOutPmtTypeDev"),  _
 System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsZOutPmtTypeDev
    Inherits System.Data.DataSet
    
    Private tabletblSales As tblSalesDataTable
    
    Private tabletlkpPaymentType As tlkpPaymentTypeDataTable
    
    Private relationtblSales_tlkpPaymentType As System.Data.DataRelation
    
    Private _schemaSerializationMode As System.Data.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("tblSales")) Is Nothing) Then
                MyBase.Tables.Add(New tblSalesDataTable(ds.Tables("tblSales")))
            End If
            If (Not (ds.Tables("tlkpPaymentType")) Is Nothing) Then
                MyBase.Tables.Add(New tlkpPaymentTypeDataTable(ds.Tables("tlkpPaymentType")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tblSales() As tblSalesDataTable
        Get
            Return Me.tabletblSales
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tlkpPaymentType() As tlkpPaymentTypeDataTable
        Get
            Return Me.tabletlkpPaymentType
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.BrowsableAttribute(true),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As System.Data.DataSet
        Dim cln As dsZOutPmtTypeDev = CType(MyBase.Clone,dsZOutPmtTypeDev)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("tblSales")) Is Nothing) Then
                MyBase.Tables.Add(New tblSalesDataTable(ds.Tables("tblSales")))
            End If
            If (Not (ds.Tables("tlkpPaymentType")) Is Nothing) Then
                MyBase.Tables.Add(New tlkpPaymentTypeDataTable(ds.Tables("tlkpPaymentType")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tabletblSales = CType(MyBase.Tables("tblSales"),tblSalesDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletblSales) Is Nothing) Then
                Me.tabletblSales.InitVars
            End If
        End If
        Me.tabletlkpPaymentType = CType(MyBase.Tables("tlkpPaymentType"),tlkpPaymentTypeDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletlkpPaymentType) Is Nothing) Then
                Me.tabletlkpPaymentType.InitVars
            End If
        End If
        Me.relationtblSales_tlkpPaymentType = Me.Relations("tblSales_tlkpPaymentType")
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dsZOutPmtTypeDev"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsZOutPmtTypeDev.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
        Me.tabletblSales = New tblSalesDataTable
        MyBase.Tables.Add(Me.tabletblSales)
        Me.tabletlkpPaymentType = New tlkpPaymentTypeDataTable
        MyBase.Tables.Add(Me.tabletlkpPaymentType)
        Me.relationtblSales_tlkpPaymentType = New System.Data.DataRelation("tblSales_tlkpPaymentType", New System.Data.DataColumn() {Me.tabletblSales.lngPaymentTypeIDColumn}, New System.Data.DataColumn() {Me.tabletlkpPaymentType.lngPaymentTypeIDColumn}, false)
        Me.Relations.Add(Me.relationtblSales_tlkpPaymentType)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializetblSales() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializetlkpPaymentType() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsZOutPmtTypeDev = New dsZOutPmtTypeDev
        Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
        xs.Add(ds.GetSchemaSerializable)
        Dim any As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Return type
    End Function
    
    Public Delegate Sub tblSalesRowChangeEventHandler(ByVal sender As Object, ByVal e As tblSalesRowChangeEvent)
    
    Public Delegate Sub tlkpPaymentTypeRowChangeEventHandler(ByVal sender As Object, ByVal e As tlkpPaymentTypeRowChangeEvent)
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tblSalesDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnlngSaleID As System.Data.DataColumn
        
        Private columnlngStoreID As System.Data.DataColumn
        
        Private columndteSaleDate As System.Data.DataColumn
        
        Private columnlngClerkID As System.Data.DataColumn
        
        Private columnlngSaleTypeID As System.Data.DataColumn
        
        Private columnlngCamperID As System.Data.DataColumn
        
        Private columnlngTransactionID As System.Data.DataColumn
        
        Private columnlngPaymentTypeID As System.Data.DataColumn
        
        Private columnstrCheckWriter As System.Data.DataColumn
        
        Private columnblnMovedforCC As System.Data.DataColumn
        
        Private columnstrCCNumber As System.Data.DataColumn
        
        Private columnstrCCExpDate As System.Data.DataColumn
        
        Private columnlngStaffID As System.Data.DataColumn
        
        Private columnlngDeptID As System.Data.DataColumn
        
        Private columnlngRegistrationID As System.Data.DataColumn
        
        Private columndteZdOut As System.Data.DataColumn
        
        Private columnlngWSID As System.Data.DataColumn
        
        Private columnstrPhone As System.Data.DataColumn
        
        Private columnstrZip As System.Data.DataColumn
        
        Private columnstrAuthNumber As System.Data.DataColumn
        
        Private columncurTotalCharge As System.Data.DataColumn
        
        Private columncurTax As System.Data.DataColumn
        
        Private columncurSubTotal As System.Data.DataColumn
        
        Private columncurDiscount As System.Data.DataColumn
        
        Private columnstrCVV2 As System.Data.DataColumn
        
        Private columnstrBillName As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tblSales"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property lngSaleIDColumn() As System.Data.DataColumn
            Get
                Return Me.columnlngSaleID
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property lngStoreIDColumn() As System.Data.DataColumn
            Get
                Return Me.columnlngStoreID
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property dteSaleDateColumn() As System.Data.DataColumn
            Get
                Return Me.columndteSaleDate
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property lngClerkIDColumn() As System.Data.DataColumn
            Get
                Return Me.columnlngClerkID
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property lngSaleTypeIDColumn() As System.Data.DataColumn
            Get
                Return Me.columnlngSaleTypeID
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property lngCamperIDColumn() As System.Data.DataColumn
            Get
                Return Me.columnlngCamperID
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property lngTransactionIDColumn() As System.Data.DataColumn
            Get
                Return Me.columnlngTransactionID
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property lngPaymentTypeIDColumn() As System.Data.DataColumn
            Get
                Return Me.columnlngPaymentTypeID
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property strCheckWriterColumn() As System.Data.DataColumn
            Get
                Return Me.columnstrCheckWriter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property blnMovedforCCColumn() As System.Data.DataColumn
            Get
                Return Me.columnblnMovedforCC
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property strCCNumberColumn() As System.Data.DataColumn
            Get
                Return Me.columnstrCCNumber
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property strCCExpDateColumn() As System.Data.DataColumn
            Get
                Return Me.columnstrCCExpDate
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property lngStaffIDColumn() As System.Data.DataColumn
            Get
                Return Me.columnlngStaffID
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property lngDeptIDColumn() As System.Data.DataColumn
            Get
                Return Me.columnlngDeptID
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property lngRegistrationIDColumn() As System.Data.DataColumn
            Get
                Return Me.columnlngRegistrationID
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property dteZdOutColumn() As System.Data.DataColumn
            Get
                Return Me.columndteZdOut
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property lngWSIDColumn() As System.Data.DataColumn
            Get
                Return Me.columnlngWSID
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property strPhoneColumn() As System.Data.DataColumn
            Get
                Return Me.columnstrPhone
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property strZipColumn() As System.Data.DataColumn
            Get
                Return Me.columnstrZip
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property strAuthNumberColumn() As System.Data.DataColumn
            Get
                Return Me.columnstrAuthNumber
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property curTotalChargeColumn() As System.Data.DataColumn
            Get
                Return Me.columncurTotalCharge
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property curTaxColumn() As System.Data.DataColumn
            Get
                Return Me.columncurTax
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property curSubTotalColumn() As System.Data.DataColumn
            Get
                Return Me.columncurSubTotal
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property curDiscountColumn() As System.Data.DataColumn
            Get
                Return Me.columncurDiscount
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property strCVV2Column() As System.Data.DataColumn
            Get
                Return Me.columnstrCVV2
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property strBillNameColumn() As System.Data.DataColumn
            Get
                Return Me.columnstrBillName
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tblSalesRow
            Get
                Return CType(Me.Rows(index),tblSalesRow)
            End Get
        End Property
        
        Public Event tblSalesRowChanging As tblSalesRowChangeEventHandler
        
        Public Event tblSalesRowChanged As tblSalesRowChangeEventHandler
        
        Public Event tblSalesRowDeleting As tblSalesRowChangeEventHandler
        
        Public Event tblSalesRowDeleted As tblSalesRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddtblSalesRow(ByVal row As tblSalesRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddtblSalesRow( _
                    ByVal lngStoreID As Integer,  _
                    ByVal dteSaleDate As Date,  _
                    ByVal lngClerkID As Integer,  _
                    ByVal lngSaleTypeID As Integer,  _
                    ByVal lngCamperID As Integer,  _
                    ByVal lngTransactionID As Integer,  _
                    ByVal lngPaymentTypeID As Integer,  _
                    ByVal strCheckWriter As String,  _
                    ByVal blnMovedforCC As Boolean,  _
                    ByVal strCCNumber As String,  _
                    ByVal strCCExpDate As String,  _
                    ByVal lngStaffID As Integer,  _
                    ByVal lngDeptID As Integer,  _
                    ByVal lngRegistrationID As Integer,  _
                    ByVal dteZdOut As Date,  _
                    ByVal lngWSID As Integer,  _
                    ByVal strPhone As String,  _
                    ByVal strZip As String,  _
                    ByVal strAuthNumber As String,  _
                    ByVal curTotalCharge As Decimal,  _
                    ByVal curTax As Decimal,  _
                    ByVal curSubTotal As Decimal,  _
                    ByVal curDiscount As Decimal,  _
                    ByVal strCVV2 As String,  _
                    ByVal strBillName As String) As tblSalesRow
            Dim rowtblSalesRow As tblSalesRow = CType(Me.NewRow,tblSalesRow)
            rowtblSalesRow.ItemArray = New Object() {Nothing, lngStoreID, dteSaleDate, lngClerkID, lngSaleTypeID, lngCamperID, lngTransactionID, lngPaymentTypeID, strCheckWriter, blnMovedforCC, strCCNumber, strCCExpDate, lngStaffID, lngDeptID, lngRegistrationID, dteZdOut, lngWSID, strPhone, strZip, strAuthNumber, curTotalCharge, curTax, curSubTotal, curDiscount, strCVV2, strBillName}
            Me.Rows.Add(rowtblSalesRow)
            Return rowtblSalesRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBylngSaleID(ByVal lngSaleID As Integer) As tblSalesRow
            Return CType(Me.Rows.Find(New Object() {lngSaleID}),tblSalesRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As tblSalesDataTable = CType(MyBase.Clone,tblSalesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New tblSalesDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnlngSaleID = MyBase.Columns("lngSaleID")
            Me.columnlngStoreID = MyBase.Columns("lngStoreID")
            Me.columndteSaleDate = MyBase.Columns("dteSaleDate")
            Me.columnlngClerkID = MyBase.Columns("lngClerkID")
            Me.columnlngSaleTypeID = MyBase.Columns("lngSaleTypeID")
            Me.columnlngCamperID = MyBase.Columns("lngCamperID")
            Me.columnlngTransactionID = MyBase.Columns("lngTransactionID")
            Me.columnlngPaymentTypeID = MyBase.Columns("lngPaymentTypeID")
            Me.columnstrCheckWriter = MyBase.Columns("strCheckWriter")
            Me.columnblnMovedforCC = MyBase.Columns("blnMovedforCC")
            Me.columnstrCCNumber = MyBase.Columns("strCCNumber")
            Me.columnstrCCExpDate = MyBase.Columns("strCCExpDate")
            Me.columnlngStaffID = MyBase.Columns("lngStaffID")
            Me.columnlngDeptID = MyBase.Columns("lngDeptID")
            Me.columnlngRegistrationID = MyBase.Columns("lngRegistrationID")
            Me.columndteZdOut = MyBase.Columns("dteZdOut")
            Me.columnlngWSID = MyBase.Columns("lngWSID")
            Me.columnstrPhone = MyBase.Columns("strPhone")
            Me.columnstrZip = MyBase.Columns("strZip")
            Me.columnstrAuthNumber = MyBase.Columns("strAuthNumber")
            Me.columncurTotalCharge = MyBase.Columns("curTotalCharge")
            Me.columncurTax = MyBase.Columns("curTax")
            Me.columncurSubTotal = MyBase.Columns("curSubTotal")
            Me.columncurDiscount = MyBase.Columns("curDiscount")
            Me.columnstrCVV2 = MyBase.Columns("strCVV2")
            Me.columnstrBillName = MyBase.Columns("strBillName")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnlngSaleID = New System.Data.DataColumn("lngSaleID", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlngSaleID)
            Me.columnlngStoreID = New System.Data.DataColumn("lngStoreID", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlngStoreID)
            Me.columndteSaleDate = New System.Data.DataColumn("dteSaleDate", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndteSaleDate)
            Me.columnlngClerkID = New System.Data.DataColumn("lngClerkID", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlngClerkID)
            Me.columnlngSaleTypeID = New System.Data.DataColumn("lngSaleTypeID", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlngSaleTypeID)
            Me.columnlngCamperID = New System.Data.DataColumn("lngCamperID", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlngCamperID)
            Me.columnlngTransactionID = New System.Data.DataColumn("lngTransactionID", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlngTransactionID)
            Me.columnlngPaymentTypeID = New System.Data.DataColumn("lngPaymentTypeID", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlngPaymentTypeID)
            Me.columnstrCheckWriter = New System.Data.DataColumn("strCheckWriter", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstrCheckWriter)
            Me.columnblnMovedforCC = New System.Data.DataColumn("blnMovedforCC", GetType(Boolean), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnblnMovedforCC)
            Me.columnstrCCNumber = New System.Data.DataColumn("strCCNumber", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstrCCNumber)
            Me.columnstrCCExpDate = New System.Data.DataColumn("strCCExpDate", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstrCCExpDate)
            Me.columnlngStaffID = New System.Data.DataColumn("lngStaffID", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlngStaffID)
            Me.columnlngDeptID = New System.Data.DataColumn("lngDeptID", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlngDeptID)
            Me.columnlngRegistrationID = New System.Data.DataColumn("lngRegistrationID", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlngRegistrationID)
            Me.columndteZdOut = New System.Data.DataColumn("dteZdOut", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndteZdOut)
            Me.columnlngWSID = New System.Data.DataColumn("lngWSID", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlngWSID)
            Me.columnstrPhone = New System.Data.DataColumn("strPhone", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstrPhone)
            Me.columnstrZip = New System.Data.DataColumn("strZip", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstrZip)
            Me.columnstrAuthNumber = New System.Data.DataColumn("strAuthNumber", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstrAuthNumber)
            Me.columncurTotalCharge = New System.Data.DataColumn("curTotalCharge", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncurTotalCharge)
            Me.columncurTax = New System.Data.DataColumn("curTax", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncurTax)
            Me.columncurSubTotal = New System.Data.DataColumn("curSubTotal", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncurSubTotal)
            Me.columncurDiscount = New System.Data.DataColumn("curDiscount", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncurDiscount)
            Me.columnstrCVV2 = New System.Data.DataColumn("strCVV2", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstrCVV2)
            Me.columnstrBillName = New System.Data.DataColumn("strBillName", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstrBillName)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnlngSaleID}, true))
            Me.columnlngSaleID.AutoIncrement = true
            Me.columnlngSaleID.AllowDBNull = false
            Me.columnlngSaleID.Unique = true
            Me.columnstrCheckWriter.MaxLength = 30
            Me.columnstrCCNumber.MaxLength = 50
            Me.columnstrCCExpDate.MaxLength = 4
            Me.columnstrPhone.MaxLength = 50
            Me.columnstrZip.MaxLength = 50
            Me.columnstrAuthNumber.MaxLength = 50
            Me.columnstrCVV2.MaxLength = 50
            Me.columnstrBillName.MaxLength = 255
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewtblSalesRow() As tblSalesRow
            Return CType(Me.NewRow,tblSalesRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New tblSalesRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(tblSalesRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tblSalesRowChangedEvent) Is Nothing) Then
                RaiseEvent tblSalesRowChanged(Me, New tblSalesRowChangeEvent(CType(e.Row,tblSalesRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tblSalesRowChangingEvent) Is Nothing) Then
                RaiseEvent tblSalesRowChanging(Me, New tblSalesRowChangeEvent(CType(e.Row,tblSalesRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tblSalesRowDeletedEvent) Is Nothing) Then
                RaiseEvent tblSalesRowDeleted(Me, New tblSalesRowChangeEvent(CType(e.Row,tblSalesRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tblSalesRowDeletingEvent) Is Nothing) Then
                RaiseEvent tblSalesRowDeleting(Me, New tblSalesRowChangeEvent(CType(e.Row,tblSalesRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovetblSalesRow(ByVal row As tblSalesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsZOutPmtTypeDev = New dsZOutPmtTypeDev
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tblSalesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tlkpPaymentTypeDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnlngPaymentTypeID As System.Data.DataColumn
        
        Private columnstrPaymentType As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tlkpPaymentType"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property lngPaymentTypeIDColumn() As System.Data.DataColumn
            Get
                Return Me.columnlngPaymentTypeID
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property strPaymentTypeColumn() As System.Data.DataColumn
            Get
                Return Me.columnstrPaymentType
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tlkpPaymentTypeRow
            Get
                Return CType(Me.Rows(index),tlkpPaymentTypeRow)
            End Get
        End Property
        
        Public Event tlkpPaymentTypeRowChanging As tlkpPaymentTypeRowChangeEventHandler
        
        Public Event tlkpPaymentTypeRowChanged As tlkpPaymentTypeRowChangeEventHandler
        
        Public Event tlkpPaymentTypeRowDeleting As tlkpPaymentTypeRowChangeEventHandler
        
        Public Event tlkpPaymentTypeRowDeleted As tlkpPaymentTypeRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddtlkpPaymentTypeRow(ByVal row As tlkpPaymentTypeRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddtlkpPaymentTypeRow(ByVal strPaymentType As String) As tlkpPaymentTypeRow
            Dim rowtlkpPaymentTypeRow As tlkpPaymentTypeRow = CType(Me.NewRow,tlkpPaymentTypeRow)
            rowtlkpPaymentTypeRow.ItemArray = New Object() {Nothing, strPaymentType}
            Me.Rows.Add(rowtlkpPaymentTypeRow)
            Return rowtlkpPaymentTypeRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As tlkpPaymentTypeDataTable = CType(MyBase.Clone,tlkpPaymentTypeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New tlkpPaymentTypeDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnlngPaymentTypeID = MyBase.Columns("lngPaymentTypeID")
            Me.columnstrPaymentType = MyBase.Columns("strPaymentType")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnlngPaymentTypeID = New System.Data.DataColumn("lngPaymentTypeID", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlngPaymentTypeID)
            Me.columnstrPaymentType = New System.Data.DataColumn("strPaymentType", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstrPaymentType)
            Me.columnlngPaymentTypeID.AutoIncrement = true
            Me.columnstrPaymentType.MaxLength = 50
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewtlkpPaymentTypeRow() As tlkpPaymentTypeRow
            Return CType(Me.NewRow,tlkpPaymentTypeRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New tlkpPaymentTypeRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(tlkpPaymentTypeRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tlkpPaymentTypeRowChangedEvent) Is Nothing) Then
                RaiseEvent tlkpPaymentTypeRowChanged(Me, New tlkpPaymentTypeRowChangeEvent(CType(e.Row,tlkpPaymentTypeRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tlkpPaymentTypeRowChangingEvent) Is Nothing) Then
                RaiseEvent tlkpPaymentTypeRowChanging(Me, New tlkpPaymentTypeRowChangeEvent(CType(e.Row,tlkpPaymentTypeRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tlkpPaymentTypeRowDeletedEvent) Is Nothing) Then
                RaiseEvent tlkpPaymentTypeRowDeleted(Me, New tlkpPaymentTypeRowChangeEvent(CType(e.Row,tlkpPaymentTypeRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tlkpPaymentTypeRowDeletingEvent) Is Nothing) Then
                RaiseEvent tlkpPaymentTypeRowDeleting(Me, New tlkpPaymentTypeRowChangeEvent(CType(e.Row,tlkpPaymentTypeRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovetlkpPaymentTypeRow(ByVal row As tlkpPaymentTypeRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsZOutPmtTypeDev = New dsZOutPmtTypeDev
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tlkpPaymentTypeDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class tblSalesRow
        Inherits System.Data.DataRow
        
        Private tabletblSales As tblSalesDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletblSales = CType(Me.Table,tblSalesDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property lngSaleID() As Integer
            Get
                Return CType(Me(Me.tabletblSales.lngSaleIDColumn),Integer)
            End Get
            Set
                Me(Me.tabletblSales.lngSaleIDColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property lngStoreID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblSales.lngStoreIDColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'lngStoreID' in table 'tblSales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblSales.lngStoreIDColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property dteSaleDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletblSales.dteSaleDateColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'dteSaleDate' in table 'tblSales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblSales.dteSaleDateColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property lngClerkID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblSales.lngClerkIDColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'lngClerkID' in table 'tblSales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblSales.lngClerkIDColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property lngSaleTypeID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblSales.lngSaleTypeIDColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'lngSaleTypeID' in table 'tblSales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblSales.lngSaleTypeIDColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property lngCamperID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblSales.lngCamperIDColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'lngCamperID' in table 'tblSales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblSales.lngCamperIDColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property lngTransactionID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblSales.lngTransactionIDColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'lngTransactionID' in table 'tblSales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblSales.lngTransactionIDColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property lngPaymentTypeID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblSales.lngPaymentTypeIDColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'lngPaymentTypeID' in table 'tblSales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblSales.lngPaymentTypeIDColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property strCheckWriter() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblSales.strCheckWriterColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'strCheckWriter' in table 'tblSales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblSales.strCheckWriterColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property blnMovedforCC() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblSales.blnMovedforCCColumn),Boolean)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'blnMovedforCC' in table 'tblSales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblSales.blnMovedforCCColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property strCCNumber() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblSales.strCCNumberColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'strCCNumber' in table 'tblSales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblSales.strCCNumberColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property strCCExpDate() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblSales.strCCExpDateColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'strCCExpDate' in table 'tblSales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblSales.strCCExpDateColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property lngStaffID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblSales.lngStaffIDColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'lngStaffID' in table 'tblSales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblSales.lngStaffIDColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property lngDeptID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblSales.lngDeptIDColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'lngDeptID' in table 'tblSales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblSales.lngDeptIDColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property lngRegistrationID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblSales.lngRegistrationIDColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'lngRegistrationID' in table 'tblSales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblSales.lngRegistrationIDColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property dteZdOut() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletblSales.dteZdOutColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'dteZdOut' in table 'tblSales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblSales.dteZdOutColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property lngWSID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblSales.lngWSIDColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'lngWSID' in table 'tblSales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblSales.lngWSIDColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property strPhone() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblSales.strPhoneColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'strPhone' in table 'tblSales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblSales.strPhoneColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property strZip() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblSales.strZipColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'strZip' in table 'tblSales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblSales.strZipColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property strAuthNumber() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblSales.strAuthNumberColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'strAuthNumber' in table 'tblSales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblSales.strAuthNumberColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property curTotalCharge() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabletblSales.curTotalChargeColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'curTotalCharge' in table 'tblSales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblSales.curTotalChargeColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property curTax() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabletblSales.curTaxColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'curTax' in table 'tblSales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblSales.curTaxColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property curSubTotal() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabletblSales.curSubTotalColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'curSubTotal' in table 'tblSales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblSales.curSubTotalColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property curDiscount() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabletblSales.curDiscountColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'curDiscount' in table 'tblSales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblSales.curDiscountColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property strCVV2() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblSales.strCVV2Column),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'strCVV2' in table 'tblSales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblSales.strCVV2Column) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property strBillName() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblSales.strBillNameColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'strBillName' in table 'tblSales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblSales.strBillNameColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IslngStoreIDNull() As Boolean
            Return Me.IsNull(Me.tabletblSales.lngStoreIDColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetlngStoreIDNull()
            Me(Me.tabletblSales.lngStoreIDColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsdteSaleDateNull() As Boolean
            Return Me.IsNull(Me.tabletblSales.dteSaleDateColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetdteSaleDateNull()
            Me(Me.tabletblSales.dteSaleDateColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IslngClerkIDNull() As Boolean
            Return Me.IsNull(Me.tabletblSales.lngClerkIDColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetlngClerkIDNull()
            Me(Me.tabletblSales.lngClerkIDColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IslngSaleTypeIDNull() As Boolean
            Return Me.IsNull(Me.tabletblSales.lngSaleTypeIDColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetlngSaleTypeIDNull()
            Me(Me.tabletblSales.lngSaleTypeIDColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IslngCamperIDNull() As Boolean
            Return Me.IsNull(Me.tabletblSales.lngCamperIDColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetlngCamperIDNull()
            Me(Me.tabletblSales.lngCamperIDColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IslngTransactionIDNull() As Boolean
            Return Me.IsNull(Me.tabletblSales.lngTransactionIDColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetlngTransactionIDNull()
            Me(Me.tabletblSales.lngTransactionIDColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IslngPaymentTypeIDNull() As Boolean
            Return Me.IsNull(Me.tabletblSales.lngPaymentTypeIDColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetlngPaymentTypeIDNull()
            Me(Me.tabletblSales.lngPaymentTypeIDColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsstrCheckWriterNull() As Boolean
            Return Me.IsNull(Me.tabletblSales.strCheckWriterColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetstrCheckWriterNull()
            Me(Me.tabletblSales.strCheckWriterColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsblnMovedforCCNull() As Boolean
            Return Me.IsNull(Me.tabletblSales.blnMovedforCCColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetblnMovedforCCNull()
            Me(Me.tabletblSales.blnMovedforCCColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsstrCCNumberNull() As Boolean
            Return Me.IsNull(Me.tabletblSales.strCCNumberColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetstrCCNumberNull()
            Me(Me.tabletblSales.strCCNumberColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsstrCCExpDateNull() As Boolean
            Return Me.IsNull(Me.tabletblSales.strCCExpDateColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetstrCCExpDateNull()
            Me(Me.tabletblSales.strCCExpDateColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IslngStaffIDNull() As Boolean
            Return Me.IsNull(Me.tabletblSales.lngStaffIDColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetlngStaffIDNull()
            Me(Me.tabletblSales.lngStaffIDColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IslngDeptIDNull() As Boolean
            Return Me.IsNull(Me.tabletblSales.lngDeptIDColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetlngDeptIDNull()
            Me(Me.tabletblSales.lngDeptIDColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IslngRegistrationIDNull() As Boolean
            Return Me.IsNull(Me.tabletblSales.lngRegistrationIDColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetlngRegistrationIDNull()
            Me(Me.tabletblSales.lngRegistrationIDColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsdteZdOutNull() As Boolean
            Return Me.IsNull(Me.tabletblSales.dteZdOutColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetdteZdOutNull()
            Me(Me.tabletblSales.dteZdOutColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IslngWSIDNull() As Boolean
            Return Me.IsNull(Me.tabletblSales.lngWSIDColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetlngWSIDNull()
            Me(Me.tabletblSales.lngWSIDColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsstrPhoneNull() As Boolean
            Return Me.IsNull(Me.tabletblSales.strPhoneColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetstrPhoneNull()
            Me(Me.tabletblSales.strPhoneColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsstrZipNull() As Boolean
            Return Me.IsNull(Me.tabletblSales.strZipColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetstrZipNull()
            Me(Me.tabletblSales.strZipColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsstrAuthNumberNull() As Boolean
            Return Me.IsNull(Me.tabletblSales.strAuthNumberColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetstrAuthNumberNull()
            Me(Me.tabletblSales.strAuthNumberColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscurTotalChargeNull() As Boolean
            Return Me.IsNull(Me.tabletblSales.curTotalChargeColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcurTotalChargeNull()
            Me(Me.tabletblSales.curTotalChargeColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscurTaxNull() As Boolean
            Return Me.IsNull(Me.tabletblSales.curTaxColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcurTaxNull()
            Me(Me.tabletblSales.curTaxColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscurSubTotalNull() As Boolean
            Return Me.IsNull(Me.tabletblSales.curSubTotalColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcurSubTotalNull()
            Me(Me.tabletblSales.curSubTotalColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscurDiscountNull() As Boolean
            Return Me.IsNull(Me.tabletblSales.curDiscountColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcurDiscountNull()
            Me(Me.tabletblSales.curDiscountColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsstrCVV2Null() As Boolean
            Return Me.IsNull(Me.tabletblSales.strCVV2Column)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetstrCVV2Null()
            Me(Me.tabletblSales.strCVV2Column) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsstrBillNameNull() As Boolean
            Return Me.IsNull(Me.tabletblSales.strBillNameColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetstrBillNameNull()
            Me(Me.tabletblSales.strBillNameColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GettlkpPaymentTypeRows() As tlkpPaymentTypeRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("tblSales_tlkpPaymentType")),tlkpPaymentTypeRow())
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class tlkpPaymentTypeRow
        Inherits System.Data.DataRow
        
        Private tabletlkpPaymentType As tlkpPaymentTypeDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletlkpPaymentType = CType(Me.Table,tlkpPaymentTypeDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property lngPaymentTypeID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletlkpPaymentType.lngPaymentTypeIDColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'lngPaymentTypeID' in table 'tlkpPaymentType' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletlkpPaymentType.lngPaymentTypeIDColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property strPaymentType() As String
            Get
                Try 
                    Return CType(Me(Me.tabletlkpPaymentType.strPaymentTypeColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'strPaymentType' in table 'tlkpPaymentType' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletlkpPaymentType.strPaymentTypeColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tblSalesRow() As tblSalesRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("tblSales_tlkpPaymentType")),tblSalesRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("tblSales_tlkpPaymentType"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IslngPaymentTypeIDNull() As Boolean
            Return Me.IsNull(Me.tabletlkpPaymentType.lngPaymentTypeIDColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetlngPaymentTypeIDNull()
            Me(Me.tabletlkpPaymentType.lngPaymentTypeIDColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsstrPaymentTypeNull() As Boolean
            Return Me.IsNull(Me.tabletlkpPaymentType.strPaymentTypeColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetstrPaymentTypeNull()
            Me(Me.tabletlkpPaymentType.strPaymentTypeColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class tblSalesRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As tblSalesRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As tblSalesRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As tblSalesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class tlkpPaymentTypeRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As tlkpPaymentTypeRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As tlkpPaymentTypeRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As tlkpPaymentTypeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace dsZOutPmtTypeDevTableAdapters
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class tblSalesTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "tblSales"
            tableMapping.ColumnMappings.Add("lngSaleID", "lngSaleID")
            tableMapping.ColumnMappings.Add("lngStoreID", "lngStoreID")
            tableMapping.ColumnMappings.Add("dteSaleDate", "dteSaleDate")
            tableMapping.ColumnMappings.Add("lngClerkID", "lngClerkID")
            tableMapping.ColumnMappings.Add("lngSaleTypeID", "lngSaleTypeID")
            tableMapping.ColumnMappings.Add("lngCamperID", "lngCamperID")
            tableMapping.ColumnMappings.Add("lngTransactionID", "lngTransactionID")
            tableMapping.ColumnMappings.Add("lngPaymentTypeID", "lngPaymentTypeID")
            tableMapping.ColumnMappings.Add("strCheckWriter", "strCheckWriter")
            tableMapping.ColumnMappings.Add("blnMovedforCC", "blnMovedforCC")
            tableMapping.ColumnMappings.Add("strCCNumber", "strCCNumber")
            tableMapping.ColumnMappings.Add("strCCExpDate", "strCCExpDate")
            tableMapping.ColumnMappings.Add("lngStaffID", "lngStaffID")
            tableMapping.ColumnMappings.Add("lngDeptID", "lngDeptID")
            tableMapping.ColumnMappings.Add("lngRegistrationID", "lngRegistrationID")
            tableMapping.ColumnMappings.Add("dteZdOut", "dteZdOut")
            tableMapping.ColumnMappings.Add("lngWSID", "lngWSID")
            tableMapping.ColumnMappings.Add("strPhone", "strPhone")
            tableMapping.ColumnMappings.Add("strZip", "strZip")
            tableMapping.ColumnMappings.Add("strAuthNumber", "strAuthNumber")
            tableMapping.ColumnMappings.Add("curTotalCharge", "curTotalCharge")
            tableMapping.ColumnMappings.Add("curTax", "curTax")
            tableMapping.ColumnMappings.Add("curSubTotal", "curSubTotal")
            tableMapping.ColumnMappings.Add("curDiscount", "curDiscount")
            tableMapping.ColumnMappings.Add("strCVV2", "strCVV2")
            tableMapping.ColumnMappings.Add("strBillName", "strBillName")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.OleDb.OleDbCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `tblSales` WHERE ((`lngSaleID` = ?) AND ((? = 1 AND `lngStoreID` IS N"& _ 
                "ULL) OR (`lngStoreID` = ?)) AND ((? = 1 AND `dteSaleDate` IS NULL) OR (`dteSaleD"& _ 
                "ate` = ?)) AND ((? = 1 AND `lngClerkID` IS NULL) OR (`lngClerkID` = ?)) AND ((? "& _ 
                "= 1 AND `lngSaleTypeID` IS NULL) OR (`lngSaleTypeID` = ?)) AND ((? = 1 AND `lngC"& _ 
                "amperID` IS NULL) OR (`lngCamperID` = ?)) AND ((? = 1 AND `lngTransactionID` IS "& _ 
                "NULL) OR (`lngTransactionID` = ?)) AND ((? = 1 AND `lngPaymentTypeID` IS NULL) O"& _ 
                "R (`lngPaymentTypeID` = ?)) AND ((? = 1 AND `strCheckWriter` IS NULL) OR (`strCh"& _ 
                "eckWriter` = ?)) AND ((? = 1 AND `blnMovedforCC` IS NULL) OR (`blnMovedforCC` = "& _ 
                "?)) AND ((? = 1 AND `strCCNumber` IS NULL) OR (`strCCNumber` = ?)) AND ((? = 1 A"& _ 
                "ND `strCCExpDate` IS NULL) OR (`strCCExpDate` = ?)) AND ((? = 1 AND `lngStaffID`"& _ 
                " IS NULL) OR (`lngStaffID` = ?)) AND ((? = 1 AND `lngDeptID` IS NULL) OR (`lngDe"& _ 
                "ptID` = ?)) AND ((? = 1 AND `lngRegistrationID` IS NULL) OR (`lngRegistrationID`"& _ 
                " = ?)) AND ((? = 1 AND `dteZdOut` IS NULL) OR (`dteZdOut` = ?)) AND ((? = 1 AND "& _ 
                "`lngWSID` IS NULL) OR (`lngWSID` = ?)) AND ((? = 1 AND `strPhone` IS NULL) OR (`"& _ 
                "strPhone` = ?)) AND ((? = 1 AND `strZip` IS NULL) OR (`strZip` = ?)) AND ((? = 1"& _ 
                " AND `strAuthNumber` IS NULL) OR (`strAuthNumber` = ?)) AND ((? = 1 AND `curTota"& _ 
                "lCharge` IS NULL) OR (`curTotalCharge` = ?)) AND ((? = 1 AND `curTax` IS NULL) O"& _ 
                "R (`curTax` = ?)) AND ((? = 1 AND `curSubTotal` IS NULL) OR (`curSubTotal` = ?))"& _ 
                " AND ((? = 1 AND `curDiscount` IS NULL) OR (`curDiscount` = ?)) AND ((? = 1 AND "& _ 
                "`strCVV2` IS NULL) OR (`strCVV2` = ?)) AND ((? = 1 AND `strBillName` IS NULL) OR"& _ 
                " (`strBillName` = ?)))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_lngSaleID", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "lngSaleID", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_lngStoreID", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "lngStoreID", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_lngStoreID", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "lngStoreID", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_dteSaleDate", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "dteSaleDate", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_dteSaleDate", System.Data.OleDb.OleDbType.[Date], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "dteSaleDate", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_lngClerkID", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "lngClerkID", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_lngClerkID", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "lngClerkID", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_lngSaleTypeID", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "lngSaleTypeID", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_lngSaleTypeID", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "lngSaleTypeID", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_lngCamperID", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "lngCamperID", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_lngCamperID", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "lngCamperID", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_lngTransactionID", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "lngTransactionID", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_lngTransactionID", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "lngTransactionID", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_lngPaymentTypeID", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "lngPaymentTypeID", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_lngPaymentTypeID", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "lngPaymentTypeID", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_strCheckWriter", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "strCheckWriter", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_strCheckWriter", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "strCheckWriter", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_blnMovedforCC", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "blnMovedforCC", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_blnMovedforCC", System.Data.OleDb.OleDbType.[Boolean], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "blnMovedforCC", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_strCCNumber", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "strCCNumber", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_strCCNumber", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "strCCNumber", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_strCCExpDate", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "strCCExpDate", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_strCCExpDate", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "strCCExpDate", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_lngStaffID", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "lngStaffID", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_lngStaffID", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "lngStaffID", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_lngDeptID", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "lngDeptID", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_lngDeptID", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "lngDeptID", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_lngRegistrationID", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "lngRegistrationID", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_lngRegistrationID", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "lngRegistrationID", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_dteZdOut", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "dteZdOut", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_dteZdOut", System.Data.OleDb.OleDbType.[Date], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "dteZdOut", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_lngWSID", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "lngWSID", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_lngWSID", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "lngWSID", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_strPhone", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "strPhone", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_strPhone", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "strPhone", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_strZip", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "strZip", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_strZip", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "strZip", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_strAuthNumber", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "strAuthNumber", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_strAuthNumber", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "strAuthNumber", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_curTotalCharge", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "curTotalCharge", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_curTotalCharge", System.Data.OleDb.OleDbType.Currency, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "curTotalCharge", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_curTax", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "curTax", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_curTax", System.Data.OleDb.OleDbType.Currency, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "curTax", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_curSubTotal", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "curSubTotal", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_curSubTotal", System.Data.OleDb.OleDbType.Currency, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "curSubTotal", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_curDiscount", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "curDiscount", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_curDiscount", System.Data.OleDb.OleDbType.Currency, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "curDiscount", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_strCVV2", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "strCVV2", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_strCVV2", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "strCVV2", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_strBillName", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "strBillName", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_strBillName", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "strBillName", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.InsertCommand = New System.Data.OleDb.OleDbCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `tblSales` (`lngStoreID`, `dteSaleDate`, `lngClerkID`, `lngSaleTypeID"& _ 
                "`, `lngCamperID`, `lngTransactionID`, `lngPaymentTypeID`, `strCheckWriter`, `bln"& _ 
                "MovedforCC`, `strCCNumber`, `strCCExpDate`, `lngStaffID`, `lngDeptID`, `lngRegis"& _ 
                "trationID`, `dteZdOut`, `lngWSID`, `strPhone`, `strZip`, `strAuthNumber`, `curTo"& _ 
                "talCharge`, `curTax`, `curSubTotal`, `curDiscount`, `strCVV2`, `strBillName`) VA"& _ 
                "LUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"& _ 
                ""
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("lngStoreID", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "lngStoreID", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("dteSaleDate", System.Data.OleDb.OleDbType.[Date], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "dteSaleDate", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("lngClerkID", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "lngClerkID", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("lngSaleTypeID", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "lngSaleTypeID", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("lngCamperID", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "lngCamperID", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("lngTransactionID", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "lngTransactionID", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("lngPaymentTypeID", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "lngPaymentTypeID", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("strCheckWriter", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "strCheckWriter", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("blnMovedforCC", System.Data.OleDb.OleDbType.[Boolean], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "blnMovedforCC", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("strCCNumber", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "strCCNumber", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("strCCExpDate", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "strCCExpDate", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("lngStaffID", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "lngStaffID", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("lngDeptID", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "lngDeptID", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("lngRegistrationID", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "lngRegistrationID", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("dteZdOut", System.Data.OleDb.OleDbType.[Date], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "dteZdOut", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("lngWSID", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "lngWSID", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("strPhone", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "strPhone", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("strZip", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "strZip", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("strAuthNumber", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "strAuthNumber", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("curTotalCharge", System.Data.OleDb.OleDbType.Currency, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "curTotalCharge", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("curTax", System.Data.OleDb.OleDbType.Currency, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "curTax", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("curSubTotal", System.Data.OleDb.OleDbType.Currency, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "curSubTotal", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("curDiscount", System.Data.OleDb.OleDbType.Currency, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "curDiscount", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("strCVV2", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "strCVV2", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("strBillName", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "strBillName", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand = New System.Data.OleDb.OleDbCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `tblSales` SET `lngStoreID` = ?, `dteSaleDate` = ?, `lngClerkID` = ?, `lng"& _ 
                "SaleTypeID` = ?, `lngCamperID` = ?, `lngTransactionID` = ?, `lngPaymentTypeID` ="& _ 
                " ?, `strCheckWriter` = ?, `blnMovedforCC` = ?, `strCCNumber` = ?, `strCCExpDate`"& _ 
                " = ?, `lngStaffID` = ?, `lngDeptID` = ?, `lngRegistrationID` = ?, `dteZdOut` = ?"& _ 
                ", `lngWSID` = ?, `strPhone` = ?, `strZip` = ?, `strAuthNumber` = ?, `curTotalCha"& _ 
                "rge` = ?, `curTax` = ?, `curSubTotal` = ?, `curDiscount` = ?, `strCVV2` = ?, `st"& _ 
                "rBillName` = ? WHERE ((`lngSaleID` = ?) AND ((? = 1 AND `lngStoreID` IS NULL) OR"& _ 
                " (`lngStoreID` = ?)) AND ((? = 1 AND `dteSaleDate` IS NULL) OR (`dteSaleDate` = "& _ 
                "?)) AND ((? = 1 AND `lngClerkID` IS NULL) OR (`lngClerkID` = ?)) AND ((? = 1 AND"& _ 
                " `lngSaleTypeID` IS NULL) OR (`lngSaleTypeID` = ?)) AND ((? = 1 AND `lngCamperID"& _ 
                "` IS NULL) OR (`lngCamperID` = ?)) AND ((? = 1 AND `lngTransactionID` IS NULL) O"& _ 
                "R (`lngTransactionID` = ?)) AND ((? = 1 AND `lngPaymentTypeID` IS NULL) OR (`lng"& _ 
                "PaymentTypeID` = ?)) AND ((? = 1 AND `strCheckWriter` IS NULL) OR (`strCheckWrit"& _ 
                "er` = ?)) AND ((? = 1 AND `blnMovedforCC` IS NULL) OR (`blnMovedforCC` = ?)) AND"& _ 
                " ((? = 1 AND `strCCNumber` IS NULL) OR (`strCCNumber` = ?)) AND ((? = 1 AND `str"& _ 
                "CCExpDate` IS NULL) OR (`strCCExpDate` = ?)) AND ((? = 1 AND `lngStaffID` IS NUL"& _ 
                "L) OR (`lngStaffID` = ?)) AND ((? = 1 AND `lngDeptID` IS NULL) OR (`lngDeptID` ="& _ 
                " ?)) AND ((? = 1 AND `lngRegistrationID` IS NULL) OR (`lngRegistrationID` = ?)) "& _ 
                "AND ((? = 1 AND `dteZdOut` IS NULL) OR (`dteZdOut` = ?)) AND ((? = 1 AND `lngWSI"& _ 
                "D` IS NULL) OR (`lngWSID` = ?)) AND ((? = 1 AND `strPhone` IS NULL) OR (`strPhon"& _ 
                "e` = ?)) AND ((? = 1 AND `strZip` IS NULL) OR (`strZip` = ?)) AND ((? = 1 AND `s"& _ 
                "trAuthNumber` IS NULL) OR (`strAuthNumber` = ?)) AND ((? = 1 AND `curTotalCharge"& _ 
                "` IS NULL) OR (`curTotalCharge` = ?)) AND ((? = 1 AND `curTax` IS NULL) OR (`cur"& _ 
                "Tax` = ?)) AND ((? = 1 AND `curSubTotal` IS NULL) OR (`curSubTotal` = ?)) AND (("& _ 
                "? = 1 AND `curDiscount` IS NULL) OR (`curDiscount` = ?)) AND ((? = 1 AND `strCVV"& _ 
                "2` IS NULL) OR (`strCVV2` = ?)) AND ((? = 1 AND `strBillName` IS NULL) OR (`strB"& _ 
                "illName` = ?)))"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("lngStoreID", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "lngStoreID", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("dteSaleDate", System.Data.OleDb.OleDbType.[Date], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "dteSaleDate", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("lngClerkID", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "lngClerkID", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("lngSaleTypeID", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "lngSaleTypeID", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("lngCamperID", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "lngCamperID", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("lngTransactionID", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "lngTransactionID", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("lngPaymentTypeID", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "lngPaymentTypeID", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("strCheckWriter", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "strCheckWriter", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("blnMovedforCC", System.Data.OleDb.OleDbType.[Boolean], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "blnMovedforCC", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("strCCNumber", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "strCCNumber", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("strCCExpDate", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "strCCExpDate", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("lngStaffID", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "lngStaffID", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("lngDeptID", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "lngDeptID", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("lngRegistrationID", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "lngRegistrationID", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("dteZdOut", System.Data.OleDb.OleDbType.[Date], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "dteZdOut", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("lngWSID", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "lngWSID", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("strPhone", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "strPhone", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("strZip", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "strZip", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("strAuthNumber", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "strAuthNumber", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("curTotalCharge", System.Data.OleDb.OleDbType.Currency, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "curTotalCharge", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("curTax", System.Data.OleDb.OleDbType.Currency, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "curTax", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("curSubTotal", System.Data.OleDb.OleDbType.Currency, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "curSubTotal", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("curDiscount", System.Data.OleDb.OleDbType.Currency, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "curDiscount", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("strCVV2", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "strCVV2", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("strBillName", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "strBillName", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_lngSaleID", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "lngSaleID", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_lngStoreID", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "lngStoreID", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_lngStoreID", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "lngStoreID", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_dteSaleDate", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "dteSaleDate", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_dteSaleDate", System.Data.OleDb.OleDbType.[Date], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "dteSaleDate", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_lngClerkID", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "lngClerkID", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_lngClerkID", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "lngClerkID", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_lngSaleTypeID", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "lngSaleTypeID", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_lngSaleTypeID", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "lngSaleTypeID", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_lngCamperID", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "lngCamperID", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_lngCamperID", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "lngCamperID", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_lngTransactionID", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "lngTransactionID", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_lngTransactionID", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "lngTransactionID", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_lngPaymentTypeID", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "lngPaymentTypeID", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_lngPaymentTypeID", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "lngPaymentTypeID", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_strCheckWriter", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "strCheckWriter", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_strCheckWriter", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "strCheckWriter", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_blnMovedforCC", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "blnMovedforCC", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_blnMovedforCC", System.Data.OleDb.OleDbType.[Boolean], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "blnMovedforCC", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_strCCNumber", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "strCCNumber", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_strCCNumber", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "strCCNumber", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_strCCExpDate", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "strCCExpDate", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_strCCExpDate", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "strCCExpDate", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_lngStaffID", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "lngStaffID", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_lngStaffID", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "lngStaffID", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_lngDeptID", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "lngDeptID", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_lngDeptID", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "lngDeptID", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_lngRegistrationID", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "lngRegistrationID", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_lngRegistrationID", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "lngRegistrationID", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_dteZdOut", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "dteZdOut", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_dteZdOut", System.Data.OleDb.OleDbType.[Date], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "dteZdOut", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_lngWSID", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "lngWSID", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_lngWSID", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "lngWSID", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_strPhone", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "strPhone", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_strPhone", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "strPhone", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_strZip", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "strZip", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_strZip", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "strZip", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_strAuthNumber", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "strAuthNumber", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_strAuthNumber", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "strAuthNumber", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_curTotalCharge", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "curTotalCharge", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_curTotalCharge", System.Data.OleDb.OleDbType.Currency, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "curTotalCharge", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_curTax", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "curTax", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_curTax", System.Data.OleDb.OleDbType.Currency, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "curTax", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_curSubTotal", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "curSubTotal", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_curSubTotal", System.Data.OleDb.OleDbType.Currency, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "curSubTotal", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_curDiscount", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "curDiscount", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_curDiscount", System.Data.OleDb.OleDbType.Currency, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "curDiscount", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_strCVV2", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "strCVV2", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_strCVV2", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "strCVV2", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_strBillName", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "strBillName", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_strBillName", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "strBillName", System.Data.DataRowVersion.Original, false, Nothing))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.CTPOS_F.My.MySettings.Default.ctPOS_bConnectionString1
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT lngSaleID, lngStoreID, dteSaleDate, lngClerkID, lngSaleTypeID, lngCamperID"& _ 
                ", lngTransactionID, lngPaymentTypeID, strCheckWriter, blnMovedforCC, strCCNumber"& _ 
                ", strCCExpDate, lngStaffID, lngDeptID, lngRegistrationID, dteZdOut, lngWSID, str"& _ 
                "Phone, strZip, strAuthNumber, curTotalCharge, curTax, curSubTotal, curDiscount, "& _ 
                "strCVV2, strBillName FROM tblSales"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsZOutPmtTypeDev.tblSalesDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsZOutPmtTypeDev.tblSalesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsZOutPmtTypeDev.tblSalesDataTable = New dsZOutPmtTypeDev.tblSalesDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsZOutPmtTypeDev.tblSalesDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsZOutPmtTypeDev) As Integer
            Return Me.Adapter.Update(dataSet, "tblSales")
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_lngSaleID As Integer,  _
                    ByVal Original_lngStoreID As System.Nullable(Of Integer),  _
                    ByVal Original_dteSaleDate As System.Nullable(Of Date),  _
                    ByVal Original_lngClerkID As System.Nullable(Of Integer),  _
                    ByVal Original_lngSaleTypeID As System.Nullable(Of Integer),  _
                    ByVal Original_lngCamperID As System.Nullable(Of Integer),  _
                    ByVal Original_lngTransactionID As System.Nullable(Of Integer),  _
                    ByVal Original_lngPaymentTypeID As System.Nullable(Of Integer),  _
                    ByVal Original_strCheckWriter As String,  _
                    ByVal Original_blnMovedforCC As Boolean,  _
                    ByVal Original_strCCNumber As String,  _
                    ByVal Original_strCCExpDate As String,  _
                    ByVal Original_lngStaffID As System.Nullable(Of Integer),  _
                    ByVal Original_lngDeptID As System.Nullable(Of Integer),  _
                    ByVal Original_lngRegistrationID As System.Nullable(Of Integer),  _
                    ByVal Original_dteZdOut As System.Nullable(Of Date),  _
                    ByVal Original_lngWSID As System.Nullable(Of Integer),  _
                    ByVal Original_strPhone As String,  _
                    ByVal Original_strZip As String,  _
                    ByVal Original_strAuthNumber As String,  _
                    ByVal Original_curTotalCharge As System.Nullable(Of Decimal),  _
                    ByVal Original_curTax As System.Nullable(Of Decimal),  _
                    ByVal Original_curSubTotal As System.Nullable(Of Decimal),  _
                    ByVal Original_curDiscount As System.Nullable(Of Decimal),  _
                    ByVal Original_strCVV2 As String,  _
                    ByVal Original_strBillName As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_lngSaleID,Integer)
            If (Original_lngStoreID.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_lngStoreID.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = System.DBNull.Value
            End If
            If (Original_dteSaleDate.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_dteSaleDate.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = System.DBNull.Value
            End If
            If (Original_lngClerkID.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_lngClerkID.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = System.DBNull.Value
            End If
            If (Original_lngSaleTypeID.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_lngSaleTypeID.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = System.DBNull.Value
            End If
            If (Original_lngCamperID.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_lngCamperID.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = System.DBNull.Value
            End If
            If (Original_lngTransactionID.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_lngTransactionID.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = System.DBNull.Value
            End If
            If (Original_lngPaymentTypeID.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_lngPaymentTypeID.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = System.DBNull.Value
            End If
            If (Original_strCheckWriter Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_strCheckWriter,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_blnMovedforCC,Boolean)
            If (Original_strCCNumber Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_strCCNumber,String)
            End If
            If (Original_strCCExpDate Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_strCCExpDate,String)
            End If
            If (Original_lngStaffID.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_lngStaffID.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = System.DBNull.Value
            End If
            If (Original_lngDeptID.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(Original_lngDeptID.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = System.DBNull.Value
            End If
            If (Original_lngRegistrationID.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(Original_lngRegistrationID.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = System.DBNull.Value
            End If
            If (Original_dteZdOut.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(Original_dteZdOut.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = System.DBNull.Value
            End If
            If (Original_lngWSID.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = CType(Original_lngWSID.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = System.DBNull.Value
            End If
            If (Original_strPhone Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(34).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(34).Value = CType(Original_strPhone,String)
            End If
            If (Original_strZip Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(36).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(36).Value = CType(Original_strZip,String)
            End If
            If (Original_strAuthNumber Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(38).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(38).Value = CType(Original_strAuthNumber,String)
            End If
            If (Original_curTotalCharge.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(39).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(40).Value = CType(Original_curTotalCharge.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(39).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(40).Value = System.DBNull.Value
            End If
            If (Original_curTax.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(41).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(42).Value = CType(Original_curTax.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(41).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(42).Value = System.DBNull.Value
            End If
            If (Original_curSubTotal.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(43).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(44).Value = CType(Original_curSubTotal.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(43).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(44).Value = System.DBNull.Value
            End If
            If (Original_curDiscount.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(45).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(46).Value = CType(Original_curDiscount.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(45).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(46).Value = System.DBNull.Value
            End If
            If (Original_strCVV2 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(47).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(48).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(47).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(48).Value = CType(Original_strCVV2,String)
            End If
            If (Original_strBillName Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(49).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(50).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(49).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(50).Value = CType(Original_strBillName,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal lngStoreID As System.Nullable(Of Integer),  _
                    ByVal dteSaleDate As System.Nullable(Of Date),  _
                    ByVal lngClerkID As System.Nullable(Of Integer),  _
                    ByVal lngSaleTypeID As System.Nullable(Of Integer),  _
                    ByVal lngCamperID As System.Nullable(Of Integer),  _
                    ByVal lngTransactionID As System.Nullable(Of Integer),  _
                    ByVal lngPaymentTypeID As System.Nullable(Of Integer),  _
                    ByVal strCheckWriter As String,  _
                    ByVal blnMovedforCC As Boolean,  _
                    ByVal strCCNumber As String,  _
                    ByVal strCCExpDate As String,  _
                    ByVal lngStaffID As System.Nullable(Of Integer),  _
                    ByVal lngDeptID As System.Nullable(Of Integer),  _
                    ByVal lngRegistrationID As System.Nullable(Of Integer),  _
                    ByVal dteZdOut As System.Nullable(Of Date),  _
                    ByVal lngWSID As System.Nullable(Of Integer),  _
                    ByVal strPhone As String,  _
                    ByVal strZip As String,  _
                    ByVal strAuthNumber As String,  _
                    ByVal curTotalCharge As System.Nullable(Of Decimal),  _
                    ByVal curTax As System.Nullable(Of Decimal),  _
                    ByVal curSubTotal As System.Nullable(Of Decimal),  _
                    ByVal curDiscount As System.Nullable(Of Decimal),  _
                    ByVal strCVV2 As String,  _
                    ByVal strBillName As String) As Integer
            If (lngStoreID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(lngStoreID.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = System.DBNull.Value
            End If
            If (dteSaleDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(dteSaleDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = System.DBNull.Value
            End If
            If (lngClerkID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(lngClerkID.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = System.DBNull.Value
            End If
            If (lngSaleTypeID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(lngSaleTypeID.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = System.DBNull.Value
            End If
            If (lngCamperID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(lngCamperID.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = System.DBNull.Value
            End If
            If (lngTransactionID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(lngTransactionID.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = System.DBNull.Value
            End If
            If (lngPaymentTypeID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(lngPaymentTypeID.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = System.DBNull.Value
            End If
            If (strCheckWriter Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(strCheckWriter,String)
            End If
            Me.Adapter.InsertCommand.Parameters(8).Value = CType(blnMovedforCC,Boolean)
            If (strCCNumber Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(strCCNumber,String)
            End If
            If (strCCExpDate Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(strCCExpDate,String)
            End If
            If (lngStaffID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(lngStaffID.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = System.DBNull.Value
            End If
            If (lngDeptID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(lngDeptID.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = System.DBNull.Value
            End If
            If (lngRegistrationID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(lngRegistrationID.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = System.DBNull.Value
            End If
            If (dteZdOut.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(dteZdOut.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = System.DBNull.Value
            End If
            If (lngWSID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(lngWSID.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = System.DBNull.Value
            End If
            If (strPhone Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(strPhone,String)
            End If
            If (strZip Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(strZip,String)
            End If
            If (strAuthNumber Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(strAuthNumber,String)
            End If
            If (curTotalCharge.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(curTotalCharge.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = System.DBNull.Value
            End If
            If (curTax.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(curTax.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = System.DBNull.Value
            End If
            If (curSubTotal.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(curSubTotal.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = System.DBNull.Value
            End If
            If (curDiscount.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(curDiscount.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = System.DBNull.Value
            End If
            If (strCVV2 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(23).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(strCVV2,String)
            End If
            If (strBillName Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(24).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(strBillName,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal lngStoreID As System.Nullable(Of Integer),  _
                    ByVal dteSaleDate As System.Nullable(Of Date),  _
                    ByVal lngClerkID As System.Nullable(Of Integer),  _
                    ByVal lngSaleTypeID As System.Nullable(Of Integer),  _
                    ByVal lngCamperID As System.Nullable(Of Integer),  _
                    ByVal lngTransactionID As System.Nullable(Of Integer),  _
                    ByVal lngPaymentTypeID As System.Nullable(Of Integer),  _
                    ByVal strCheckWriter As String,  _
                    ByVal blnMovedforCC As Boolean,  _
                    ByVal strCCNumber As String,  _
                    ByVal strCCExpDate As String,  _
                    ByVal lngStaffID As System.Nullable(Of Integer),  _
                    ByVal lngDeptID As System.Nullable(Of Integer),  _
                    ByVal lngRegistrationID As System.Nullable(Of Integer),  _
                    ByVal dteZdOut As System.Nullable(Of Date),  _
                    ByVal lngWSID As System.Nullable(Of Integer),  _
                    ByVal strPhone As String,  _
                    ByVal strZip As String,  _
                    ByVal strAuthNumber As String,  _
                    ByVal curTotalCharge As System.Nullable(Of Decimal),  _
                    ByVal curTax As System.Nullable(Of Decimal),  _
                    ByVal curSubTotal As System.Nullable(Of Decimal),  _
                    ByVal curDiscount As System.Nullable(Of Decimal),  _
                    ByVal strCVV2 As String,  _
                    ByVal strBillName As String,  _
                    ByVal Original_lngSaleID As Integer,  _
                    ByVal Original_lngStoreID As System.Nullable(Of Integer),  _
                    ByVal Original_dteSaleDate As System.Nullable(Of Date),  _
                    ByVal Original_lngClerkID As System.Nullable(Of Integer),  _
                    ByVal Original_lngSaleTypeID As System.Nullable(Of Integer),  _
                    ByVal Original_lngCamperID As System.Nullable(Of Integer),  _
                    ByVal Original_lngTransactionID As System.Nullable(Of Integer),  _
                    ByVal Original_lngPaymentTypeID As System.Nullable(Of Integer),  _
                    ByVal Original_strCheckWriter As String,  _
                    ByVal Original_blnMovedforCC As Boolean,  _
                    ByVal Original_strCCNumber As String,  _
                    ByVal Original_strCCExpDate As String,  _
                    ByVal Original_lngStaffID As System.Nullable(Of Integer),  _
                    ByVal Original_lngDeptID As System.Nullable(Of Integer),  _
                    ByVal Original_lngRegistrationID As System.Nullable(Of Integer),  _
                    ByVal Original_dteZdOut As System.Nullable(Of Date),  _
                    ByVal Original_lngWSID As System.Nullable(Of Integer),  _
                    ByVal Original_strPhone As String,  _
                    ByVal Original_strZip As String,  _
                    ByVal Original_strAuthNumber As String,  _
                    ByVal Original_curTotalCharge As System.Nullable(Of Decimal),  _
                    ByVal Original_curTax As System.Nullable(Of Decimal),  _
                    ByVal Original_curSubTotal As System.Nullable(Of Decimal),  _
                    ByVal Original_curDiscount As System.Nullable(Of Decimal),  _
                    ByVal Original_strCVV2 As String,  _
                    ByVal Original_strBillName As String) As Integer
            If (lngStoreID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(lngStoreID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = System.DBNull.Value
            End If
            If (dteSaleDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(dteSaleDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = System.DBNull.Value
            End If
            If (lngClerkID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(lngClerkID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = System.DBNull.Value
            End If
            If (lngSaleTypeID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(lngSaleTypeID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = System.DBNull.Value
            End If
            If (lngCamperID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(lngCamperID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = System.DBNull.Value
            End If
            If (lngTransactionID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(lngTransactionID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = System.DBNull.Value
            End If
            If (lngPaymentTypeID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(lngPaymentTypeID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = System.DBNull.Value
            End If
            If (strCheckWriter Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(strCheckWriter,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(blnMovedforCC,Boolean)
            If (strCCNumber Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(strCCNumber,String)
            End If
            If (strCCExpDate Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(strCCExpDate,String)
            End If
            If (lngStaffID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(lngStaffID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = System.DBNull.Value
            End If
            If (lngDeptID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(lngDeptID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = System.DBNull.Value
            End If
            If (lngRegistrationID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(lngRegistrationID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = System.DBNull.Value
            End If
            If (dteZdOut.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(dteZdOut.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = System.DBNull.Value
            End If
            If (lngWSID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(lngWSID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = System.DBNull.Value
            End If
            If (strPhone Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(strPhone,String)
            End If
            If (strZip Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(strZip,String)
            End If
            If (strAuthNumber Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(strAuthNumber,String)
            End If
            If (curTotalCharge.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(curTotalCharge.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = System.DBNull.Value
            End If
            If (curTax.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(curTax.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = System.DBNull.Value
            End If
            If (curSubTotal.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(curSubTotal.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = System.DBNull.Value
            End If
            If (curDiscount.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(curDiscount.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = System.DBNull.Value
            End If
            If (strCVV2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(strCVV2,String)
            End If
            If (strBillName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(strBillName,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_lngSaleID,Integer)
            If (Original_lngStoreID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Original_lngStoreID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = System.DBNull.Value
            End If
            If (Original_dteSaleDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Original_dteSaleDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(29).Value = System.DBNull.Value
            End If
            If (Original_lngClerkID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_lngClerkID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = System.DBNull.Value
            End If
            If (Original_lngSaleTypeID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original_lngSaleTypeID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = System.DBNull.Value
            End If
            If (Original_lngCamperID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(Original_lngCamperID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(35).Value = System.DBNull.Value
            End If
            If (Original_lngTransactionID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(Original_lngTransactionID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(37).Value = System.DBNull.Value
            End If
            If (Original_lngPaymentTypeID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(Original_lngPaymentTypeID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(39).Value = System.DBNull.Value
            End If
            If (Original_strCheckWriter Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(41).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(Original_strCheckWriter,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(42).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(43).Value = CType(Original_blnMovedforCC,Boolean)
            If (Original_strCCNumber Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(45).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(Original_strCCNumber,String)
            End If
            If (Original_strCCExpDate Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(47).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(Original_strCCExpDate,String)
            End If
            If (Original_lngStaffID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(Original_lngStaffID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(49).Value = System.DBNull.Value
            End If
            If (Original_lngDeptID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(Original_lngDeptID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(51).Value = System.DBNull.Value
            End If
            If (Original_lngRegistrationID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(Original_lngRegistrationID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(53).Value = System.DBNull.Value
            End If
            If (Original_dteZdOut.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(55).Value = CType(Original_dteZdOut.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(55).Value = System.DBNull.Value
            End If
            If (Original_lngWSID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(57).Value = CType(Original_lngWSID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(57).Value = System.DBNull.Value
            End If
            If (Original_strPhone Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(59).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(59).Value = CType(Original_strPhone,String)
            End If
            If (Original_strZip Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(60).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(61).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(60).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(61).Value = CType(Original_strZip,String)
            End If
            If (Original_strAuthNumber Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(62).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(63).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(62).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(63).Value = CType(Original_strAuthNumber,String)
            End If
            If (Original_curTotalCharge.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(64).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(65).Value = CType(Original_curTotalCharge.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(64).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(65).Value = System.DBNull.Value
            End If
            If (Original_curTax.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(66).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(67).Value = CType(Original_curTax.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(66).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(67).Value = System.DBNull.Value
            End If
            If (Original_curSubTotal.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(68).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(69).Value = CType(Original_curSubTotal.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(68).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(69).Value = System.DBNull.Value
            End If
            If (Original_curDiscount.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(70).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(71).Value = CType(Original_curDiscount.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(70).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(71).Value = System.DBNull.Value
            End If
            If (Original_strCVV2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(72).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(73).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(72).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(73).Value = CType(Original_strCVV2,String)
            End If
            If (Original_strBillName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(74).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(75).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(74).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(75).Value = CType(Original_strBillName,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class tlkpPaymentTypeTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "tlkpPaymentType"
            tableMapping.ColumnMappings.Add("lngPaymentTypeID", "lngPaymentTypeID")
            tableMapping.ColumnMappings.Add("strPaymentType", "strPaymentType")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New System.Data.OleDb.OleDbCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `tlkpPaymentType` (`strPaymentType`) VALUES (?)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("strPaymentType", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "strPaymentType", System.Data.DataRowVersion.Current, false, Nothing))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.CTPOS_F.My.MySettings.Default.ctmain_bConnectionString
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT lngPaymentTypeID, strPaymentType FROM tlkpPaymentType"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsZOutPmtTypeDev.tlkpPaymentTypeDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsZOutPmtTypeDev.tlkpPaymentTypeDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsZOutPmtTypeDev.tlkpPaymentTypeDataTable = New dsZOutPmtTypeDev.tlkpPaymentTypeDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsZOutPmtTypeDev.tlkpPaymentTypeDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsZOutPmtTypeDev) As Integer
            Return Me.Adapter.Update(dataSet, "tlkpPaymentType")
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal strPaymentType As String) As Integer
            If (strPaymentType Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(strPaymentType,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
End Namespace
