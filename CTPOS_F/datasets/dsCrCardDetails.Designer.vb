'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.1433
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("dsCrCardDetails"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsCrCardDetails
    Inherits Global.System.Data.DataSet
    
    Private tableqryCreditCardDetails As qryCreditCardDetailsDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("qryCreditCardDetails")) Is Nothing) Then
                MyBase.Tables.Add(New qryCreditCardDetailsDataTable(ds.Tables("qryCreditCardDetails")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property qryCreditCardDetails() As qryCreditCardDetailsDataTable
        Get
            Return Me.tableqryCreditCardDetails
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As dsCrCardDetails = CType(MyBase.Clone,dsCrCardDetails)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("qryCreditCardDetails")) Is Nothing) Then
                MyBase.Tables.Add(New qryCreditCardDetailsDataTable(ds.Tables("qryCreditCardDetails")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableqryCreditCardDetails = CType(MyBase.Tables("qryCreditCardDetails"),qryCreditCardDetailsDataTable)
        If (initTable = true) Then
            If (Not (Me.tableqryCreditCardDetails) Is Nothing) Then
                Me.tableqryCreditCardDetails.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dsCrCardDetails"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsCrCardDetails.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableqryCreditCardDetails = New qryCreditCardDetailsDataTable
        MyBase.Tables.Add(Me.tableqryCreditCardDetails)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeqryCreditCardDetails() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsCrCardDetails = New dsCrCardDetails
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub qryCreditCardDetailsRowChangeEventHandler(ByVal sender As Object, ByVal e As qryCreditCardDetailsRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class qryCreditCardDetailsDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnlngSaleID As Global.System.Data.DataColumn
        
        Private columnstrStoreName As Global.System.Data.DataColumn
        
        Private columnlngStoreID As Global.System.Data.DataColumn
        
        Private columndteSaleDate As Global.System.Data.DataColumn
        
        Private columnstrUserName As Global.System.Data.DataColumn
        
        Private columnlngClerkID As Global.System.Data.DataColumn
        
        Private columnlngSaleTypeID As Global.System.Data.DataColumn
        
        Private columnstrSaleType As Global.System.Data.DataColumn
        
        Private columnlngTransactionID As Global.System.Data.DataColumn
        
        Private columnlngPaymentTypeID As Global.System.Data.DataColumn
        
        Private columnstrPaymentType As Global.System.Data.DataColumn
        
        Private columnstrCCNumber As Global.System.Data.DataColumn
        
        Private columnstrCCExpDate As Global.System.Data.DataColumn
        
        Private columndteZdOut As Global.System.Data.DataColumn
        
        Private columnlngWSID As Global.System.Data.DataColumn
        
        Private columnstrAuthNumber As Global.System.Data.DataColumn
        
        Private columnExpr1 As Global.System.Data.DataColumn
        
        Private columnSumOfcurTotal As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "qryCreditCardDetails"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property lngSaleIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlngSaleID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property strStoreNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnstrStoreName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property lngStoreIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlngStoreID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property dteSaleDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndteSaleDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property strUserNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnstrUserName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property lngClerkIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlngClerkID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property lngSaleTypeIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlngSaleTypeID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property strSaleTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnstrSaleType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property lngTransactionIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlngTransactionID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property lngPaymentTypeIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlngPaymentTypeID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property strPaymentTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnstrPaymentType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property strCCNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnstrCCNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property strCCExpDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnstrCCExpDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property dteZdOutColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndteZdOut
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property lngWSIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlngWSID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property strAuthNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnstrAuthNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Expr1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnExpr1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SumOfcurTotalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSumOfcurTotal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As qryCreditCardDetailsRow
            Get
                Return CType(Me.Rows(index),qryCreditCardDetailsRow)
            End Get
        End Property
        
        Public Event qryCreditCardDetailsRowChanging As qryCreditCardDetailsRowChangeEventHandler
        
        Public Event qryCreditCardDetailsRowChanged As qryCreditCardDetailsRowChangeEventHandler
        
        Public Event qryCreditCardDetailsRowDeleting As qryCreditCardDetailsRowChangeEventHandler
        
        Public Event qryCreditCardDetailsRowDeleted As qryCreditCardDetailsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddqryCreditCardDetailsRow(ByVal row As qryCreditCardDetailsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddqryCreditCardDetailsRow( _
                    ByVal strStoreName As String,  _
                    ByVal lngStoreID As Integer,  _
                    ByVal dteSaleDate As Date,  _
                    ByVal strUserName As String,  _
                    ByVal lngClerkID As Integer,  _
                    ByVal lngSaleTypeID As Integer,  _
                    ByVal strSaleType As String,  _
                    ByVal lngTransactionID As Integer,  _
                    ByVal lngPaymentTypeID As Integer,  _
                    ByVal strPaymentType As String,  _
                    ByVal strCCNumber As String,  _
                    ByVal strCCExpDate As String,  _
                    ByVal dteZdOut As Date,  _
                    ByVal lngWSID As Integer,  _
                    ByVal strAuthNumber As String,  _
                    ByVal Expr1 As Integer,  _
                    ByVal SumOfcurTotal As Decimal) As qryCreditCardDetailsRow
            Dim rowqryCreditCardDetailsRow As qryCreditCardDetailsRow = CType(Me.NewRow,qryCreditCardDetailsRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, strStoreName, lngStoreID, dteSaleDate, strUserName, lngClerkID, lngSaleTypeID, strSaleType, lngTransactionID, lngPaymentTypeID, strPaymentType, strCCNumber, strCCExpDate, dteZdOut, lngWSID, strAuthNumber, Expr1, SumOfcurTotal}
            rowqryCreditCardDetailsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowqryCreditCardDetailsRow)
            Return rowqryCreditCardDetailsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As qryCreditCardDetailsDataTable = CType(MyBase.Clone,qryCreditCardDetailsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New qryCreditCardDetailsDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnlngSaleID = MyBase.Columns("lngSaleID")
            Me.columnstrStoreName = MyBase.Columns("strStoreName")
            Me.columnlngStoreID = MyBase.Columns("lngStoreID")
            Me.columndteSaleDate = MyBase.Columns("dteSaleDate")
            Me.columnstrUserName = MyBase.Columns("strUserName")
            Me.columnlngClerkID = MyBase.Columns("lngClerkID")
            Me.columnlngSaleTypeID = MyBase.Columns("lngSaleTypeID")
            Me.columnstrSaleType = MyBase.Columns("strSaleType")
            Me.columnlngTransactionID = MyBase.Columns("lngTransactionID")
            Me.columnlngPaymentTypeID = MyBase.Columns("lngPaymentTypeID")
            Me.columnstrPaymentType = MyBase.Columns("strPaymentType")
            Me.columnstrCCNumber = MyBase.Columns("strCCNumber")
            Me.columnstrCCExpDate = MyBase.Columns("strCCExpDate")
            Me.columndteZdOut = MyBase.Columns("dteZdOut")
            Me.columnlngWSID = MyBase.Columns("lngWSID")
            Me.columnstrAuthNumber = MyBase.Columns("strAuthNumber")
            Me.columnExpr1 = MyBase.Columns("Expr1")
            Me.columnSumOfcurTotal = MyBase.Columns("SumOfcurTotal")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnlngSaleID = New Global.System.Data.DataColumn("lngSaleID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlngSaleID)
            Me.columnstrStoreName = New Global.System.Data.DataColumn("strStoreName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstrStoreName)
            Me.columnlngStoreID = New Global.System.Data.DataColumn("lngStoreID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlngStoreID)
            Me.columndteSaleDate = New Global.System.Data.DataColumn("dteSaleDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndteSaleDate)
            Me.columnstrUserName = New Global.System.Data.DataColumn("strUserName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstrUserName)
            Me.columnlngClerkID = New Global.System.Data.DataColumn("lngClerkID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlngClerkID)
            Me.columnlngSaleTypeID = New Global.System.Data.DataColumn("lngSaleTypeID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlngSaleTypeID)
            Me.columnstrSaleType = New Global.System.Data.DataColumn("strSaleType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstrSaleType)
            Me.columnlngTransactionID = New Global.System.Data.DataColumn("lngTransactionID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlngTransactionID)
            Me.columnlngPaymentTypeID = New Global.System.Data.DataColumn("lngPaymentTypeID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlngPaymentTypeID)
            Me.columnstrPaymentType = New Global.System.Data.DataColumn("strPaymentType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstrPaymentType)
            Me.columnstrCCNumber = New Global.System.Data.DataColumn("strCCNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstrCCNumber)
            Me.columnstrCCExpDate = New Global.System.Data.DataColumn("strCCExpDate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstrCCExpDate)
            Me.columndteZdOut = New Global.System.Data.DataColumn("dteZdOut", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndteZdOut)
            Me.columnlngWSID = New Global.System.Data.DataColumn("lngWSID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlngWSID)
            Me.columnstrAuthNumber = New Global.System.Data.DataColumn("strAuthNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstrAuthNumber)
            Me.columnExpr1 = New Global.System.Data.DataColumn("Expr1", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnExpr1)
            Me.columnSumOfcurTotal = New Global.System.Data.DataColumn("SumOfcurTotal", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSumOfcurTotal)
            Me.columnlngSaleID.AutoIncrement = true
            Me.columnstrStoreName.MaxLength = 255
            Me.columnstrUserName.MaxLength = 8
            Me.columnstrSaleType.MaxLength = 20
            Me.columnstrPaymentType.MaxLength = 50
            Me.columnstrCCNumber.MaxLength = 255
            Me.columnstrCCExpDate.MaxLength = 255
            Me.columnstrAuthNumber.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewqryCreditCardDetailsRow() As qryCreditCardDetailsRow
            Return CType(Me.NewRow,qryCreditCardDetailsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New qryCreditCardDetailsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(qryCreditCardDetailsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.qryCreditCardDetailsRowChangedEvent) Is Nothing) Then
                RaiseEvent qryCreditCardDetailsRowChanged(Me, New qryCreditCardDetailsRowChangeEvent(CType(e.Row,qryCreditCardDetailsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.qryCreditCardDetailsRowChangingEvent) Is Nothing) Then
                RaiseEvent qryCreditCardDetailsRowChanging(Me, New qryCreditCardDetailsRowChangeEvent(CType(e.Row,qryCreditCardDetailsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.qryCreditCardDetailsRowDeletedEvent) Is Nothing) Then
                RaiseEvent qryCreditCardDetailsRowDeleted(Me, New qryCreditCardDetailsRowChangeEvent(CType(e.Row,qryCreditCardDetailsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.qryCreditCardDetailsRowDeletingEvent) Is Nothing) Then
                RaiseEvent qryCreditCardDetailsRowDeleting(Me, New qryCreditCardDetailsRowChangeEvent(CType(e.Row,qryCreditCardDetailsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveqryCreditCardDetailsRow(ByVal row As qryCreditCardDetailsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsCrCardDetails = New dsCrCardDetails
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "qryCreditCardDetailsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class qryCreditCardDetailsRow
        Inherits Global.System.Data.DataRow
        
        Private tableqryCreditCardDetails As qryCreditCardDetailsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableqryCreditCardDetails = CType(Me.Table,qryCreditCardDetailsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property lngSaleID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableqryCreditCardDetails.lngSaleIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'lngSaleID' in table 'qryCreditCardDetails' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqryCreditCardDetails.lngSaleIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property strStoreName() As String
            Get
                Try 
                    Return CType(Me(Me.tableqryCreditCardDetails.strStoreNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'strStoreName' in table 'qryCreditCardDetails' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqryCreditCardDetails.strStoreNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property lngStoreID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableqryCreditCardDetails.lngStoreIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'lngStoreID' in table 'qryCreditCardDetails' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqryCreditCardDetails.lngStoreIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property dteSaleDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableqryCreditCardDetails.dteSaleDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'dteSaleDate' in table 'qryCreditCardDetails' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqryCreditCardDetails.dteSaleDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property strUserName() As String
            Get
                Try 
                    Return CType(Me(Me.tableqryCreditCardDetails.strUserNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'strUserName' in table 'qryCreditCardDetails' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqryCreditCardDetails.strUserNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property lngClerkID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableqryCreditCardDetails.lngClerkIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'lngClerkID' in table 'qryCreditCardDetails' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqryCreditCardDetails.lngClerkIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property lngSaleTypeID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableqryCreditCardDetails.lngSaleTypeIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'lngSaleTypeID' in table 'qryCreditCardDetails' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqryCreditCardDetails.lngSaleTypeIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property strSaleType() As String
            Get
                Try 
                    Return CType(Me(Me.tableqryCreditCardDetails.strSaleTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'strSaleType' in table 'qryCreditCardDetails' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqryCreditCardDetails.strSaleTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property lngTransactionID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableqryCreditCardDetails.lngTransactionIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'lngTransactionID' in table 'qryCreditCardDetails' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableqryCreditCardDetails.lngTransactionIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property lngPaymentTypeID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableqryCreditCardDetails.lngPaymentTypeIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'lngPaymentTypeID' in table 'qryCreditCardDetails' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableqryCreditCardDetails.lngPaymentTypeIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property strPaymentType() As String
            Get
                Try 
                    Return CType(Me(Me.tableqryCreditCardDetails.strPaymentTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'strPaymentType' in table 'qryCreditCardDetails' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqryCreditCardDetails.strPaymentTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property strCCNumber() As String
            Get
                Try 
                    Return CType(Me(Me.tableqryCreditCardDetails.strCCNumberColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'strCCNumber' in table 'qryCreditCardDetails' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqryCreditCardDetails.strCCNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property strCCExpDate() As String
            Get
                Try 
                    Return CType(Me(Me.tableqryCreditCardDetails.strCCExpDateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'strCCExpDate' in table 'qryCreditCardDetails' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqryCreditCardDetails.strCCExpDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property dteZdOut() As Date
            Get
                Try 
                    Return CType(Me(Me.tableqryCreditCardDetails.dteZdOutColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'dteZdOut' in table 'qryCreditCardDetails' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqryCreditCardDetails.dteZdOutColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property lngWSID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableqryCreditCardDetails.lngWSIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'lngWSID' in table 'qryCreditCardDetails' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqryCreditCardDetails.lngWSIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property strAuthNumber() As String
            Get
                Try 
                    Return CType(Me(Me.tableqryCreditCardDetails.strAuthNumberColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'strAuthNumber' in table 'qryCreditCardDetails' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqryCreditCardDetails.strAuthNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Expr1() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableqryCreditCardDetails.Expr1Column),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Expr1' in table 'qryCreditCardDetails' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqryCreditCardDetails.Expr1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SumOfcurTotal() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableqryCreditCardDetails.SumOfcurTotalColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SumOfcurTotal' in table 'qryCreditCardDetails' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqryCreditCardDetails.SumOfcurTotalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IslngSaleIDNull() As Boolean
            Return Me.IsNull(Me.tableqryCreditCardDetails.lngSaleIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetlngSaleIDNull()
            Me(Me.tableqryCreditCardDetails.lngSaleIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsstrStoreNameNull() As Boolean
            Return Me.IsNull(Me.tableqryCreditCardDetails.strStoreNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetstrStoreNameNull()
            Me(Me.tableqryCreditCardDetails.strStoreNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IslngStoreIDNull() As Boolean
            Return Me.IsNull(Me.tableqryCreditCardDetails.lngStoreIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetlngStoreIDNull()
            Me(Me.tableqryCreditCardDetails.lngStoreIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsdteSaleDateNull() As Boolean
            Return Me.IsNull(Me.tableqryCreditCardDetails.dteSaleDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetdteSaleDateNull()
            Me(Me.tableqryCreditCardDetails.dteSaleDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsstrUserNameNull() As Boolean
            Return Me.IsNull(Me.tableqryCreditCardDetails.strUserNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetstrUserNameNull()
            Me(Me.tableqryCreditCardDetails.strUserNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IslngClerkIDNull() As Boolean
            Return Me.IsNull(Me.tableqryCreditCardDetails.lngClerkIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetlngClerkIDNull()
            Me(Me.tableqryCreditCardDetails.lngClerkIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IslngSaleTypeIDNull() As Boolean
            Return Me.IsNull(Me.tableqryCreditCardDetails.lngSaleTypeIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetlngSaleTypeIDNull()
            Me(Me.tableqryCreditCardDetails.lngSaleTypeIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsstrSaleTypeNull() As Boolean
            Return Me.IsNull(Me.tableqryCreditCardDetails.strSaleTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetstrSaleTypeNull()
            Me(Me.tableqryCreditCardDetails.strSaleTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IslngTransactionIDNull() As Boolean
            Return Me.IsNull(Me.tableqryCreditCardDetails.lngTransactionIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetlngTransactionIDNull()
            Me(Me.tableqryCreditCardDetails.lngTransactionIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IslngPaymentTypeIDNull() As Boolean
            Return Me.IsNull(Me.tableqryCreditCardDetails.lngPaymentTypeIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetlngPaymentTypeIDNull()
            Me(Me.tableqryCreditCardDetails.lngPaymentTypeIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsstrPaymentTypeNull() As Boolean
            Return Me.IsNull(Me.tableqryCreditCardDetails.strPaymentTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetstrPaymentTypeNull()
            Me(Me.tableqryCreditCardDetails.strPaymentTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsstrCCNumberNull() As Boolean
            Return Me.IsNull(Me.tableqryCreditCardDetails.strCCNumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetstrCCNumberNull()
            Me(Me.tableqryCreditCardDetails.strCCNumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsstrCCExpDateNull() As Boolean
            Return Me.IsNull(Me.tableqryCreditCardDetails.strCCExpDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetstrCCExpDateNull()
            Me(Me.tableqryCreditCardDetails.strCCExpDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsdteZdOutNull() As Boolean
            Return Me.IsNull(Me.tableqryCreditCardDetails.dteZdOutColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetdteZdOutNull()
            Me(Me.tableqryCreditCardDetails.dteZdOutColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IslngWSIDNull() As Boolean
            Return Me.IsNull(Me.tableqryCreditCardDetails.lngWSIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetlngWSIDNull()
            Me(Me.tableqryCreditCardDetails.lngWSIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsstrAuthNumberNull() As Boolean
            Return Me.IsNull(Me.tableqryCreditCardDetails.strAuthNumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetstrAuthNumberNull()
            Me(Me.tableqryCreditCardDetails.strAuthNumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsExpr1Null() As Boolean
            Return Me.IsNull(Me.tableqryCreditCardDetails.Expr1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetExpr1Null()
            Me(Me.tableqryCreditCardDetails.Expr1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSumOfcurTotalNull() As Boolean
            Return Me.IsNull(Me.tableqryCreditCardDetails.SumOfcurTotalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSumOfcurTotalNull()
            Me(Me.tableqryCreditCardDetails.SumOfcurTotalColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class qryCreditCardDetailsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As qryCreditCardDetailsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As qryCreditCardDetailsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As qryCreditCardDetailsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace dsCrCardDetailsTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class qryCreditCardDetailsTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "qryCreditCardDetails"
            tableMapping.ColumnMappings.Add("lngSaleID", "lngSaleID")
            tableMapping.ColumnMappings.Add("strStoreName", "strStoreName")
            tableMapping.ColumnMappings.Add("lngStoreID", "lngStoreID")
            tableMapping.ColumnMappings.Add("dteSaleDate", "dteSaleDate")
            tableMapping.ColumnMappings.Add("strUserName", "strUserName")
            tableMapping.ColumnMappings.Add("lngClerkID", "lngClerkID")
            tableMapping.ColumnMappings.Add("lngSaleTypeID", "lngSaleTypeID")
            tableMapping.ColumnMappings.Add("strSaleType", "strSaleType")
            tableMapping.ColumnMappings.Add("lngTransactionID", "lngTransactionID")
            tableMapping.ColumnMappings.Add("lngPaymentTypeID", "lngPaymentTypeID")
            tableMapping.ColumnMappings.Add("strPaymentType", "strPaymentType")
            tableMapping.ColumnMappings.Add("strCCNumber", "strCCNumber")
            tableMapping.ColumnMappings.Add("strCCExpDate", "strCCExpDate")
            tableMapping.ColumnMappings.Add("dteZdOut", "dteZdOut")
            tableMapping.ColumnMappings.Add("lngWSID", "lngWSID")
            tableMapping.ColumnMappings.Add("strAuthNumber", "strAuthNumber")
            tableMapping.ColumnMappings.Add("Expr1", "Expr1")
            tableMapping.ColumnMappings.Add("SumOfcurTotal", "SumOfcurTotal")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.CTPOS_F.My.MySettings.Default.ctPOS_bConnectionString1
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     tblSales.lngSaleID, tblStores.strStoreName, tblSales.lngStoreID, tblSa"& _ 
                "les.dteSaleDate, tblClerks.strUserName, tblSales.lngClerkID, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                 "& _ 
                "     tblSales.lngSaleTypeID, tlkpSalesType.strSaleType, tblSales.lngTransactionI"& _ 
                "D, tblSales.lngPaymentTypeID, tlkpPaymentType.strPaymentType, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                "& _ 
                "      tblSales.strCCNumber, tblSales.strCCExpDate, tblSales.dteZdOut, tblSales.l"& _ 
                "ngWSID, tblSales.strAuthNumber, tblSalesDetail.lngSaleID AS Expr1, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"           "& _ 
                "           SUM(tblSalesDetail.curTotal) AS SumOfcurTotal"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         (((((tblS"& _ 
                "ales LEFT OUTER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      tblSalesDetail ON tblSales.lngSaleID"& _ 
                " = tblSalesDetail.lngSaleID) LEFT OUTER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      tblStores ON"& _ 
                " tblSales.lngStoreID = tblStores.lngStoreID) INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      t"& _ 
                "blClerks ON tblSales.lngClerkID = tblClerks.lngClerkID) INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            "& _ 
                "          tlkpSalesType ON tblSales.lngSaleTypeID = tlkpSalesType.lngSaleTypeID)"& _ 
                " INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      tlkpPaymentType ON tblSales.lngPaymentTypeID "& _ 
                "= tlkpPaymentType.lngPaymentTypeID)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"GROUP BY tblSales.lngSaleID, tblStores.strS"& _ 
                "toreName, tblSales.lngStoreID, tblSales.dteSaleDate, tblClerks.strUserName, tblS"& _ 
                "ales.lngClerkID, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      tblSales.lngSaleTypeID, tlkpSalesType.s"& _ 
                "trSaleType, tblSales.lngTransactionID, tblSales.lngPaymentTypeID, tlkpPaymentTyp"& _ 
                "e.strPaymentType, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      tblSales.strCCNumber, tblSales.strCCEx"& _ 
                "pDate, tblSales.dteZdOut, tblSales.lngWSID, tblSales.strAuthNumber, tblSalesDeta"& _ 
                "il.lngSaleID"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsCrCardDetails.qryCreditCardDetailsDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsCrCardDetails.qryCreditCardDetailsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsCrCardDetails.qryCreditCardDetailsDataTable = New dsCrCardDetails.qryCreditCardDetailsDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
End Namespace
