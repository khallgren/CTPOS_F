'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.1433
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("dsSummaryReport"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsSummaryReport
    Inherits Global.System.Data.DataSet
    
    Private tableqrySalesSummary As qrySalesSummaryDataTable
    
    Private tableqrySalesSummaryByDate As qrySalesSummaryByDateDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("qrySalesSummary")) Is Nothing) Then
                MyBase.Tables.Add(New qrySalesSummaryDataTable(ds.Tables("qrySalesSummary")))
            End If
            If (Not (ds.Tables("qrySalesSummaryByDate")) Is Nothing) Then
                MyBase.Tables.Add(New qrySalesSummaryByDateDataTable(ds.Tables("qrySalesSummaryByDate")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property qrySalesSummary() As qrySalesSummaryDataTable
        Get
            Return Me.tableqrySalesSummary
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property qrySalesSummaryByDate() As qrySalesSummaryByDateDataTable
        Get
            Return Me.tableqrySalesSummaryByDate
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As dsSummaryReport = CType(MyBase.Clone,dsSummaryReport)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("qrySalesSummary")) Is Nothing) Then
                MyBase.Tables.Add(New qrySalesSummaryDataTable(ds.Tables("qrySalesSummary")))
            End If
            If (Not (ds.Tables("qrySalesSummaryByDate")) Is Nothing) Then
                MyBase.Tables.Add(New qrySalesSummaryByDateDataTable(ds.Tables("qrySalesSummaryByDate")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableqrySalesSummary = CType(MyBase.Tables("qrySalesSummary"),qrySalesSummaryDataTable)
        If (initTable = true) Then
            If (Not (Me.tableqrySalesSummary) Is Nothing) Then
                Me.tableqrySalesSummary.InitVars
            End If
        End If
        Me.tableqrySalesSummaryByDate = CType(MyBase.Tables("qrySalesSummaryByDate"),qrySalesSummaryByDateDataTable)
        If (initTable = true) Then
            If (Not (Me.tableqrySalesSummaryByDate) Is Nothing) Then
                Me.tableqrySalesSummaryByDate.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dsSummaryReport"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsSummaryReport.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableqrySalesSummary = New qrySalesSummaryDataTable
        MyBase.Tables.Add(Me.tableqrySalesSummary)
        Me.tableqrySalesSummaryByDate = New qrySalesSummaryByDateDataTable
        MyBase.Tables.Add(Me.tableqrySalesSummaryByDate)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeqrySalesSummary() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeqrySalesSummaryByDate() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsSummaryReport = New dsSummaryReport
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub qrySalesSummaryRowChangeEventHandler(ByVal sender As Object, ByVal e As qrySalesSummaryRowChangeEvent)
    
    Public Delegate Sub qrySalesSummaryByDateRowChangeEventHandler(ByVal sender As Object, ByVal e As qrySalesSummaryByDateRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class qrySalesSummaryDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnlngInvCategoryID As Global.System.Data.DataColumn
        
        Private columnstrStockCode As Global.System.Data.DataColumn
        
        Private columnstrItemName As Global.System.Data.DataColumn
        
        Private columnstrInvCategory As Global.System.Data.DataColumn
        
        Private columnSumOflngQuantity As Global.System.Data.DataColumn
        
        Private columnSumOfcurTax As Global.System.Data.DataColumn
        
        Private columnSumOfcurTotal As Global.System.Data.DataColumn
        
        Private columnintCurrentQty As Global.System.Data.DataColumn
        
        Private columncurListPrice As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "qrySalesSummary"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property lngInvCategoryIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlngInvCategoryID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property strStockCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnstrStockCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property strItemNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnstrItemName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property strInvCategoryColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnstrInvCategory
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SumOflngQuantityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSumOflngQuantity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SumOfcurTaxColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSumOfcurTax
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SumOfcurTotalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSumOfcurTotal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property intCurrentQtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnintCurrentQty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property curListPriceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncurListPrice
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As qrySalesSummaryRow
            Get
                Return CType(Me.Rows(index),qrySalesSummaryRow)
            End Get
        End Property
        
        Public Event qrySalesSummaryRowChanging As qrySalesSummaryRowChangeEventHandler
        
        Public Event qrySalesSummaryRowChanged As qrySalesSummaryRowChangeEventHandler
        
        Public Event qrySalesSummaryRowDeleting As qrySalesSummaryRowChangeEventHandler
        
        Public Event qrySalesSummaryRowDeleted As qrySalesSummaryRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddqrySalesSummaryRow(ByVal row As qrySalesSummaryRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddqrySalesSummaryRow(ByVal lngInvCategoryID As Integer, ByVal strStockCode As String, ByVal strItemName As String, ByVal strInvCategory As String, ByVal SumOflngQuantity As Double, ByVal SumOfcurTax As Decimal, ByVal SumOfcurTotal As Decimal, ByVal intCurrentQty As Integer, ByVal curListPrice As Decimal) As qrySalesSummaryRow
            Dim rowqrySalesSummaryRow As qrySalesSummaryRow = CType(Me.NewRow,qrySalesSummaryRow)
            Dim columnValuesArray() As Object = New Object() {lngInvCategoryID, strStockCode, strItemName, strInvCategory, SumOflngQuantity, SumOfcurTax, SumOfcurTotal, intCurrentQty, curListPrice}
            rowqrySalesSummaryRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowqrySalesSummaryRow)
            Return rowqrySalesSummaryRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As qrySalesSummaryDataTable = CType(MyBase.Clone,qrySalesSummaryDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New qrySalesSummaryDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnlngInvCategoryID = MyBase.Columns("lngInvCategoryID")
            Me.columnstrStockCode = MyBase.Columns("strStockCode")
            Me.columnstrItemName = MyBase.Columns("strItemName")
            Me.columnstrInvCategory = MyBase.Columns("strInvCategory")
            Me.columnSumOflngQuantity = MyBase.Columns("SumOflngQuantity")
            Me.columnSumOfcurTax = MyBase.Columns("SumOfcurTax")
            Me.columnSumOfcurTotal = MyBase.Columns("SumOfcurTotal")
            Me.columnintCurrentQty = MyBase.Columns("intCurrentQty")
            Me.columncurListPrice = MyBase.Columns("curListPrice")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnlngInvCategoryID = New Global.System.Data.DataColumn("lngInvCategoryID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlngInvCategoryID)
            Me.columnstrStockCode = New Global.System.Data.DataColumn("strStockCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstrStockCode)
            Me.columnstrItemName = New Global.System.Data.DataColumn("strItemName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstrItemName)
            Me.columnstrInvCategory = New Global.System.Data.DataColumn("strInvCategory", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstrInvCategory)
            Me.columnSumOflngQuantity = New Global.System.Data.DataColumn("SumOflngQuantity", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSumOflngQuantity)
            Me.columnSumOfcurTax = New Global.System.Data.DataColumn("SumOfcurTax", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSumOfcurTax)
            Me.columnSumOfcurTotal = New Global.System.Data.DataColumn("SumOfcurTotal", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSumOfcurTotal)
            Me.columnintCurrentQty = New Global.System.Data.DataColumn("intCurrentQty", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnintCurrentQty)
            Me.columncurListPrice = New Global.System.Data.DataColumn("curListPrice", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncurListPrice)
            Me.columnstrStockCode.MaxLength = 15
            Me.columnstrItemName.MaxLength = 24
            Me.columnstrInvCategory.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewqrySalesSummaryRow() As qrySalesSummaryRow
            Return CType(Me.NewRow,qrySalesSummaryRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New qrySalesSummaryRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(qrySalesSummaryRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.qrySalesSummaryRowChangedEvent) Is Nothing) Then
                RaiseEvent qrySalesSummaryRowChanged(Me, New qrySalesSummaryRowChangeEvent(CType(e.Row,qrySalesSummaryRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.qrySalesSummaryRowChangingEvent) Is Nothing) Then
                RaiseEvent qrySalesSummaryRowChanging(Me, New qrySalesSummaryRowChangeEvent(CType(e.Row,qrySalesSummaryRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.qrySalesSummaryRowDeletedEvent) Is Nothing) Then
                RaiseEvent qrySalesSummaryRowDeleted(Me, New qrySalesSummaryRowChangeEvent(CType(e.Row,qrySalesSummaryRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.qrySalesSummaryRowDeletingEvent) Is Nothing) Then
                RaiseEvent qrySalesSummaryRowDeleting(Me, New qrySalesSummaryRowChangeEvent(CType(e.Row,qrySalesSummaryRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveqrySalesSummaryRow(ByVal row As qrySalesSummaryRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsSummaryReport = New dsSummaryReport
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "qrySalesSummaryDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class qrySalesSummaryByDateDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnstrStockCode As Global.System.Data.DataColumn
        
        Private columndteSaleDate As Global.System.Data.DataColumn
        
        Private columnstrItemName As Global.System.Data.DataColumn
        
        Private columnstrInvCategory As Global.System.Data.DataColumn
        
        Private columnSumOflngQuantity As Global.System.Data.DataColumn
        
        Private columnSumOfcurTax As Global.System.Data.DataColumn
        
        Private columnSumOfcurTotal As Global.System.Data.DataColumn
        
        Private columnintCurrentQty As Global.System.Data.DataColumn
        
        Private columncurListPrice As Global.System.Data.DataColumn
        
        Private columnlngInvCategoryID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "qrySalesSummaryByDate"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property strStockCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnstrStockCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property dteSaleDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndteSaleDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property strItemNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnstrItemName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property strInvCategoryColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnstrInvCategory
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SumOflngQuantityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSumOflngQuantity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SumOfcurTaxColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSumOfcurTax
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SumOfcurTotalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSumOfcurTotal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property intCurrentQtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnintCurrentQty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property curListPriceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncurListPrice
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property lngInvCategoryIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlngInvCategoryID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As qrySalesSummaryByDateRow
            Get
                Return CType(Me.Rows(index),qrySalesSummaryByDateRow)
            End Get
        End Property
        
        Public Event qrySalesSummaryByDateRowChanging As qrySalesSummaryByDateRowChangeEventHandler
        
        Public Event qrySalesSummaryByDateRowChanged As qrySalesSummaryByDateRowChangeEventHandler
        
        Public Event qrySalesSummaryByDateRowDeleting As qrySalesSummaryByDateRowChangeEventHandler
        
        Public Event qrySalesSummaryByDateRowDeleted As qrySalesSummaryByDateRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddqrySalesSummaryByDateRow(ByVal row As qrySalesSummaryByDateRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddqrySalesSummaryByDateRow(ByVal strStockCode As String, ByVal dteSaleDate As Date, ByVal strItemName As String, ByVal strInvCategory As String, ByVal SumOflngQuantity As Double, ByVal SumOfcurTax As Decimal, ByVal SumOfcurTotal As Decimal, ByVal intCurrentQty As Integer, ByVal curListPrice As Decimal, ByVal lngInvCategoryID As Integer) As qrySalesSummaryByDateRow
            Dim rowqrySalesSummaryByDateRow As qrySalesSummaryByDateRow = CType(Me.NewRow,qrySalesSummaryByDateRow)
            Dim columnValuesArray() As Object = New Object() {strStockCode, dteSaleDate, strItemName, strInvCategory, SumOflngQuantity, SumOfcurTax, SumOfcurTotal, intCurrentQty, curListPrice, lngInvCategoryID}
            rowqrySalesSummaryByDateRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowqrySalesSummaryByDateRow)
            Return rowqrySalesSummaryByDateRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As qrySalesSummaryByDateDataTable = CType(MyBase.Clone,qrySalesSummaryByDateDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New qrySalesSummaryByDateDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnstrStockCode = MyBase.Columns("strStockCode")
            Me.columndteSaleDate = MyBase.Columns("dteSaleDate")
            Me.columnstrItemName = MyBase.Columns("strItemName")
            Me.columnstrInvCategory = MyBase.Columns("strInvCategory")
            Me.columnSumOflngQuantity = MyBase.Columns("SumOflngQuantity")
            Me.columnSumOfcurTax = MyBase.Columns("SumOfcurTax")
            Me.columnSumOfcurTotal = MyBase.Columns("SumOfcurTotal")
            Me.columnintCurrentQty = MyBase.Columns("intCurrentQty")
            Me.columncurListPrice = MyBase.Columns("curListPrice")
            Me.columnlngInvCategoryID = MyBase.Columns("lngInvCategoryID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnstrStockCode = New Global.System.Data.DataColumn("strStockCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstrStockCode)
            Me.columndteSaleDate = New Global.System.Data.DataColumn("dteSaleDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndteSaleDate)
            Me.columnstrItemName = New Global.System.Data.DataColumn("strItemName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstrItemName)
            Me.columnstrInvCategory = New Global.System.Data.DataColumn("strInvCategory", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstrInvCategory)
            Me.columnSumOflngQuantity = New Global.System.Data.DataColumn("SumOflngQuantity", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSumOflngQuantity)
            Me.columnSumOfcurTax = New Global.System.Data.DataColumn("SumOfcurTax", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSumOfcurTax)
            Me.columnSumOfcurTotal = New Global.System.Data.DataColumn("SumOfcurTotal", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSumOfcurTotal)
            Me.columnintCurrentQty = New Global.System.Data.DataColumn("intCurrentQty", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnintCurrentQty)
            Me.columncurListPrice = New Global.System.Data.DataColumn("curListPrice", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncurListPrice)
            Me.columnlngInvCategoryID = New Global.System.Data.DataColumn("lngInvCategoryID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlngInvCategoryID)
            Me.columnstrStockCode.MaxLength = 15
            Me.columnstrItemName.MaxLength = 24
            Me.columnstrInvCategory.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewqrySalesSummaryByDateRow() As qrySalesSummaryByDateRow
            Return CType(Me.NewRow,qrySalesSummaryByDateRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New qrySalesSummaryByDateRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(qrySalesSummaryByDateRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.qrySalesSummaryByDateRowChangedEvent) Is Nothing) Then
                RaiseEvent qrySalesSummaryByDateRowChanged(Me, New qrySalesSummaryByDateRowChangeEvent(CType(e.Row,qrySalesSummaryByDateRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.qrySalesSummaryByDateRowChangingEvent) Is Nothing) Then
                RaiseEvent qrySalesSummaryByDateRowChanging(Me, New qrySalesSummaryByDateRowChangeEvent(CType(e.Row,qrySalesSummaryByDateRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.qrySalesSummaryByDateRowDeletedEvent) Is Nothing) Then
                RaiseEvent qrySalesSummaryByDateRowDeleted(Me, New qrySalesSummaryByDateRowChangeEvent(CType(e.Row,qrySalesSummaryByDateRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.qrySalesSummaryByDateRowDeletingEvent) Is Nothing) Then
                RaiseEvent qrySalesSummaryByDateRowDeleting(Me, New qrySalesSummaryByDateRowChangeEvent(CType(e.Row,qrySalesSummaryByDateRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveqrySalesSummaryByDateRow(ByVal row As qrySalesSummaryByDateRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsSummaryReport = New dsSummaryReport
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "qrySalesSummaryByDateDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class qrySalesSummaryRow
        Inherits Global.System.Data.DataRow
        
        Private tableqrySalesSummary As qrySalesSummaryDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableqrySalesSummary = CType(Me.Table,qrySalesSummaryDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property lngInvCategoryID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableqrySalesSummary.lngInvCategoryIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'lngInvCategoryID' in table 'qrySalesSummary' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqrySalesSummary.lngInvCategoryIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property strStockCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableqrySalesSummary.strStockCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'strStockCode' in table 'qrySalesSummary' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqrySalesSummary.strStockCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property strItemName() As String
            Get
                Try 
                    Return CType(Me(Me.tableqrySalesSummary.strItemNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'strItemName' in table 'qrySalesSummary' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqrySalesSummary.strItemNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property strInvCategory() As String
            Get
                Try 
                    Return CType(Me(Me.tableqrySalesSummary.strInvCategoryColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'strInvCategory' in table 'qrySalesSummary' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqrySalesSummary.strInvCategoryColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SumOflngQuantity() As Double
            Get
                Try 
                    Return CType(Me(Me.tableqrySalesSummary.SumOflngQuantityColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SumOflngQuantity' in table 'qrySalesSummary' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqrySalesSummary.SumOflngQuantityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SumOfcurTax() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableqrySalesSummary.SumOfcurTaxColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SumOfcurTax' in table 'qrySalesSummary' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqrySalesSummary.SumOfcurTaxColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SumOfcurTotal() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableqrySalesSummary.SumOfcurTotalColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SumOfcurTotal' in table 'qrySalesSummary' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqrySalesSummary.SumOfcurTotalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property intCurrentQty() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableqrySalesSummary.intCurrentQtyColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'intCurrentQty' in table 'qrySalesSummary' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqrySalesSummary.intCurrentQtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property curListPrice() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableqrySalesSummary.curListPriceColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'curListPrice' in table 'qrySalesSummary' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqrySalesSummary.curListPriceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IslngInvCategoryIDNull() As Boolean
            Return Me.IsNull(Me.tableqrySalesSummary.lngInvCategoryIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetlngInvCategoryIDNull()
            Me(Me.tableqrySalesSummary.lngInvCategoryIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsstrStockCodeNull() As Boolean
            Return Me.IsNull(Me.tableqrySalesSummary.strStockCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetstrStockCodeNull()
            Me(Me.tableqrySalesSummary.strStockCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsstrItemNameNull() As Boolean
            Return Me.IsNull(Me.tableqrySalesSummary.strItemNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetstrItemNameNull()
            Me(Me.tableqrySalesSummary.strItemNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsstrInvCategoryNull() As Boolean
            Return Me.IsNull(Me.tableqrySalesSummary.strInvCategoryColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetstrInvCategoryNull()
            Me(Me.tableqrySalesSummary.strInvCategoryColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSumOflngQuantityNull() As Boolean
            Return Me.IsNull(Me.tableqrySalesSummary.SumOflngQuantityColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSumOflngQuantityNull()
            Me(Me.tableqrySalesSummary.SumOflngQuantityColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSumOfcurTaxNull() As Boolean
            Return Me.IsNull(Me.tableqrySalesSummary.SumOfcurTaxColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSumOfcurTaxNull()
            Me(Me.tableqrySalesSummary.SumOfcurTaxColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSumOfcurTotalNull() As Boolean
            Return Me.IsNull(Me.tableqrySalesSummary.SumOfcurTotalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSumOfcurTotalNull()
            Me(Me.tableqrySalesSummary.SumOfcurTotalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsintCurrentQtyNull() As Boolean
            Return Me.IsNull(Me.tableqrySalesSummary.intCurrentQtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetintCurrentQtyNull()
            Me(Me.tableqrySalesSummary.intCurrentQtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscurListPriceNull() As Boolean
            Return Me.IsNull(Me.tableqrySalesSummary.curListPriceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcurListPriceNull()
            Me(Me.tableqrySalesSummary.curListPriceColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class qrySalesSummaryByDateRow
        Inherits Global.System.Data.DataRow
        
        Private tableqrySalesSummaryByDate As qrySalesSummaryByDateDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableqrySalesSummaryByDate = CType(Me.Table,qrySalesSummaryByDateDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property strStockCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableqrySalesSummaryByDate.strStockCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'strStockCode' in table 'qrySalesSummaryByDate' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqrySalesSummaryByDate.strStockCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property dteSaleDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableqrySalesSummaryByDate.dteSaleDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'dteSaleDate' in table 'qrySalesSummaryByDate' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqrySalesSummaryByDate.dteSaleDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property strItemName() As String
            Get
                Try 
                    Return CType(Me(Me.tableqrySalesSummaryByDate.strItemNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'strItemName' in table 'qrySalesSummaryByDate' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqrySalesSummaryByDate.strItemNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property strInvCategory() As String
            Get
                Try 
                    Return CType(Me(Me.tableqrySalesSummaryByDate.strInvCategoryColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'strInvCategory' in table 'qrySalesSummaryByDate' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableqrySalesSummaryByDate.strInvCategoryColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SumOflngQuantity() As Double
            Get
                Try 
                    Return CType(Me(Me.tableqrySalesSummaryByDate.SumOflngQuantityColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SumOflngQuantity' in table 'qrySalesSummaryByDate' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableqrySalesSummaryByDate.SumOflngQuantityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SumOfcurTax() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableqrySalesSummaryByDate.SumOfcurTaxColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SumOfcurTax' in table 'qrySalesSummaryByDate' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqrySalesSummaryByDate.SumOfcurTaxColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SumOfcurTotal() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableqrySalesSummaryByDate.SumOfcurTotalColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SumOfcurTotal' in table 'qrySalesSummaryByDate' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqrySalesSummaryByDate.SumOfcurTotalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property intCurrentQty() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableqrySalesSummaryByDate.intCurrentQtyColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'intCurrentQty' in table 'qrySalesSummaryByDate' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqrySalesSummaryByDate.intCurrentQtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property curListPrice() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableqrySalesSummaryByDate.curListPriceColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'curListPrice' in table 'qrySalesSummaryByDate' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqrySalesSummaryByDate.curListPriceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property lngInvCategoryID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableqrySalesSummaryByDate.lngInvCategoryIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'lngInvCategoryID' in table 'qrySalesSummaryByDate' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableqrySalesSummaryByDate.lngInvCategoryIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsstrStockCodeNull() As Boolean
            Return Me.IsNull(Me.tableqrySalesSummaryByDate.strStockCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetstrStockCodeNull()
            Me(Me.tableqrySalesSummaryByDate.strStockCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsdteSaleDateNull() As Boolean
            Return Me.IsNull(Me.tableqrySalesSummaryByDate.dteSaleDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetdteSaleDateNull()
            Me(Me.tableqrySalesSummaryByDate.dteSaleDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsstrItemNameNull() As Boolean
            Return Me.IsNull(Me.tableqrySalesSummaryByDate.strItemNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetstrItemNameNull()
            Me(Me.tableqrySalesSummaryByDate.strItemNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsstrInvCategoryNull() As Boolean
            Return Me.IsNull(Me.tableqrySalesSummaryByDate.strInvCategoryColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetstrInvCategoryNull()
            Me(Me.tableqrySalesSummaryByDate.strInvCategoryColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSumOflngQuantityNull() As Boolean
            Return Me.IsNull(Me.tableqrySalesSummaryByDate.SumOflngQuantityColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSumOflngQuantityNull()
            Me(Me.tableqrySalesSummaryByDate.SumOflngQuantityColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSumOfcurTaxNull() As Boolean
            Return Me.IsNull(Me.tableqrySalesSummaryByDate.SumOfcurTaxColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSumOfcurTaxNull()
            Me(Me.tableqrySalesSummaryByDate.SumOfcurTaxColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSumOfcurTotalNull() As Boolean
            Return Me.IsNull(Me.tableqrySalesSummaryByDate.SumOfcurTotalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSumOfcurTotalNull()
            Me(Me.tableqrySalesSummaryByDate.SumOfcurTotalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsintCurrentQtyNull() As Boolean
            Return Me.IsNull(Me.tableqrySalesSummaryByDate.intCurrentQtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetintCurrentQtyNull()
            Me(Me.tableqrySalesSummaryByDate.intCurrentQtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscurListPriceNull() As Boolean
            Return Me.IsNull(Me.tableqrySalesSummaryByDate.curListPriceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcurListPriceNull()
            Me(Me.tableqrySalesSummaryByDate.curListPriceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IslngInvCategoryIDNull() As Boolean
            Return Me.IsNull(Me.tableqrySalesSummaryByDate.lngInvCategoryIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetlngInvCategoryIDNull()
            Me(Me.tableqrySalesSummaryByDate.lngInvCategoryIDColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class qrySalesSummaryRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As qrySalesSummaryRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As qrySalesSummaryRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As qrySalesSummaryRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class qrySalesSummaryByDateRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As qrySalesSummaryByDateRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As qrySalesSummaryByDateRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As qrySalesSummaryByDateRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace dsSummaryReportTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class qrySalesSummaryTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "qrySalesSummary"
            tableMapping.ColumnMappings.Add("lngInvCategoryID", "lngInvCategoryID")
            tableMapping.ColumnMappings.Add("strStockCode", "strStockCode")
            tableMapping.ColumnMappings.Add("strItemName", "strItemName")
            tableMapping.ColumnMappings.Add("strInvCategory", "strInvCategory")
            tableMapping.ColumnMappings.Add("SumOflngQuantity", "SumOflngQuantity")
            tableMapping.ColumnMappings.Add("SumOfcurTax", "SumOfcurTax")
            tableMapping.ColumnMappings.Add("SumOfcurTotal", "SumOfcurTotal")
            tableMapping.ColumnMappings.Add("intCurrentQty", "intCurrentQty")
            tableMapping.ColumnMappings.Add("curListPrice", "curListPrice")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.CTPOS_F.My.MySettings.Default.ctPOS_bConnectionString1
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     tblInventory.lngInvCategoryID, tblInventory.strStockCode, tblInventory"& _ 
                ".strItemName, tblInvCodeCategory.strInvCategory, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      SUM(tbl"& _ 
                "SalesDetail.lngQuantity) AS SumOflngQuantity, SUM(tblSalesDetail.curTax) AS SumO"& _ 
                "fcurTax, SUM(tblSalesDetail.curTotal) AS SumOfcurTotal, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      "& _ 
                "tblInventory.intCurrentQty, tblInventory.curListPrice"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         (tblSales RI"& _ 
                "GHT OUTER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      ((tblSalesDetail RIGHT OUTER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"       "& _ 
                "               tblInventory ON tblSalesDetail.lngInventoryID = tblInventory.lngI"& _ 
                "nventoryID) INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      tblInvCodeCategory ON tblInventory"& _ 
                ".lngInvCategoryID = tblInvCodeCategory.lngInvCategoryID) ON tblSales.lngSaleID ="& _ 
                " tblSalesDetail.lngSaleID)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"GROUP BY tblInventory.lngInvCategoryID, tblInventory"& _ 
                ".strStockCode, tblInventory.strItemName, tblInvCodeCategory.strInvCategory, tblI"& _ 
                "nventory.intCurrentQty, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      tblInventory.curListPrice"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsSummaryReport.qrySalesSummaryDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsSummaryReport.qrySalesSummaryDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsSummaryReport.qrySalesSummaryDataTable = New dsSummaryReport.qrySalesSummaryDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class qrySalesSummaryByDateTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "qrySalesSummaryByDate"
            tableMapping.ColumnMappings.Add("strStockCode", "strStockCode")
            tableMapping.ColumnMappings.Add("dteSaleDate", "dteSaleDate")
            tableMapping.ColumnMappings.Add("strItemName", "strItemName")
            tableMapping.ColumnMappings.Add("strInvCategory", "strInvCategory")
            tableMapping.ColumnMappings.Add("SumOflngQuantity", "SumOflngQuantity")
            tableMapping.ColumnMappings.Add("SumOfcurTax", "SumOfcurTax")
            tableMapping.ColumnMappings.Add("SumOfcurTotal", "SumOfcurTotal")
            tableMapping.ColumnMappings.Add("intCurrentQty", "intCurrentQty")
            tableMapping.ColumnMappings.Add("curListPrice", "curListPrice")
            tableMapping.ColumnMappings.Add("lngInvCategoryID", "lngInvCategoryID")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.CTPOS_F.My.MySettings.Default.ctPOS_bConnectionString1
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     tblInventory.strStockCode, tblSales.dteSaleDate, tblInventory.strItemN"& _ 
                "ame, tblInvCodeCategory.strInvCategory, SUM(tblSalesDetail.lngQuantity) "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"      "& _ 
                "                AS SumOflngQuantity, SUM(tblSalesDetail.curTax) AS SumOfcurTax, "& _ 
                "SUM(tblSalesDetail.curTotal) AS SumOfcurTotal, tblInventory.intCurrentQty, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"   "& _ 
                "                   tblInventory.curListPrice, tblInventory.lngInvCategoryID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FRO"& _ 
                "M         (tblSales RIGHT OUTER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      ((tblSalesDetail RIG"& _ 
                "HT OUTER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      tblInventory ON tblSalesDetail.lngInventory"& _ 
                "ID = tblInventory.lngInventoryID) INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      tblInvCodeCa"& _ 
                "tegory ON tblInventory.lngInvCategoryID = tblInvCodeCategory.lngInvCategoryID) O"& _ 
                "N tblSales.lngSaleID = tblSalesDetail.lngSaleID)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"GROUP BY tblInventory.strStock"& _ 
                "Code, tblSales.dteSaleDate, tblInventory.strItemName, tblInvCodeCategory.strInvC"& _ 
                "ategory, tblInventory.intCurrentQty, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      tblInventory.curLis"& _ 
                "tPrice, tblInventory.lngInvCategoryID"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsSummaryReport.qrySalesSummaryByDateDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsSummaryReport.qrySalesSummaryByDateDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsSummaryReport.qrySalesSummaryByDateDataTable = New dsSummaryReport.qrySalesSummaryByDateDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
End Namespace
